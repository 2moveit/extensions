//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Entities.ControlPanel;
    using Signum.Web.ControlPanel;
    using Signum.Entities.Reports;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/ControlPanel/Views/PanelPart.cshtml")]
    public class _Page_ControlPanel_Views_PanelPart_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_ControlPanel_Views_PanelPart_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {



WriteLiteral(@"<script type=""text/javascript"">
    function toggleCol(cbFillId, colInputId) {
        if ($(""#"" + cbFillId + "":checked"").length > 0)
            $('#' + colInputId).val(1).attr('disabled', 'disabled');
        else
            $('#' + colInputId).attr('disabled', '');
    }
</script>
");


 using (var tc = Html.TypeContext<PanelPart>())
{
    using (var sc = tc.SubContext())
    {
        sc.BreakLine = false;
        sc.ValueFirst = true;

        
   Write(Html.ValueLine(sc, pp => pp.Row, vl => vl.ValueHtmlProps["size"] = 2));

                                                                              ;
        string colId = null;
        
   Write(Html.ValueLine(sc, pp => pp.Column, vl => { vl.ValueHtmlProps["size"] = 2; colId = vl.ControlID; }));

                                                                                                            ;
        string fillId = null;
        
   Write(Html.ValueLine(sc, pp => pp.Fill, vl => { vl.ValueHtmlProps["onclick"] = "toggleCol(this.id,'" + colId + "');"; fillId = vl.ControlID; }));

                                                                                                                                                  ;
        

WriteLiteral("    <script type=\"text/javascript\">\r\n        $(document).ready(function () { togg" +
"leCol(\'");


                                              Write(fillId);

WriteLiteral("\', \'");


                                                         Write(colId);

WriteLiteral("\'); });\r\n    </script>\r\n");


    
        
   Write(Html.ValueLine(sc, pp => pp.Title));

                                           ;
        
   Write(Html.EntityLine(sc, pp => pp.Content, el => el.Autocomplete = false));

                                                                             ;
    }
}
WriteLiteral(" ");


        }
    }
}
