@using System.Configuration
@using Signum.Web.Properties
@using Signum.Entities.ControlPanel
@using Signum.Web.ControlPanel
@using Signum.Entities.DynamicQuery
@using Signum.Entities.Chart
@using Signum.Web.Chart
@using Signum.Engine.Chart
@using Signum.Engine.DynamicQuery
@model PanelPart

@Html.ScriptsJs("~/Chart/Scripts/SF_Chart.js",
                "~/scripts/d3.v2.min.js")
@Html.ScriptCss("~/Chart/Content/SF_Chart.css")

@{ 
    UserChartDN uc = ((UserChartPartDN)Model.Content).UserChart;
    ChartRequest request = UserChartDN.ToRequest(uc);

    using (var ucTc = new TypeContext<ChartRequest>(request, "r{0}c{1}".Formato(Model.Row, Model.Column)))
    {
        ResultTable resultTable = ChartLogic.ExecuteChart(request);

        var json = ChartClient.DataJson(ucTc.Value, resultTable);

        <div id="@ucTc.Compose("sfChartControl")" class="sf-search-control sf-chart-control" data-prefix="@ucTc.ControlID">
            <div style="display:none">
                @Html.HiddenRuntimeInfo(ucTc)
                @Html.HiddenRuntimeInfo(ucTc, cr => cr.Chart)
        
                @Html.Hidden(ucTc.Compose("sfOrders"), request.Orders.IsNullOrEmpty() ? "" :
                    (request.Orders.ToString(oo => (oo.OrderType == OrderType.Ascending ? "" : "-") + oo.Token.FullKey(), ";") + ";"))

                @{
                    ViewData[ViewDataKeys.QueryDescription] = DynamicQueryManager.Current.QueryDescription(request.QueryName);
                    ViewData[ViewDataKeys.FilterOptions] = request.Filters.Select(f => new FilterOption { Token = f.Token, Operation = f.Operation, Value = f.Value }).ToList();
                }

                @Html.Partial(Navigator.Manager.FilterBuilderView, ucTc)

                @using (var chart = ucTc.SubContext(cr => cr.Chart))
                {
                    <div id="@ucTc.Compose("sfChartBuilderContainer")">
                        @Html.Partial(ChartClient.ChartBuilderView, chart)
                    </div>
                    <script type="text/javascript">
                        $('#@ucTc.Compose("sfChartBuilderContainer")').chartBuilder($.extend({ prefix: '@ucTc.ControlID'}, @MvcHtmlString.Create(uc.ToJS())));
                    </script>
                }
            </div>
            <div id="@ucTc.Compose("sfChartContainer")">
                <div class="sf-chart-container" 
                    data-open-url="@(Url.Action<ChartController>(cc => cc.OpenSubgroup(ucTc.ControlID)))" 
                    data-fullscreen-url="@(Url.Action<ChartController>(cc => cc.FullScreen(ucTc.ControlID)))">
                </div>
            </div>
        </div>
    
                MvcHtmlString divSelector = MvcHtmlString.Create("#" + ucTc.Compose("sfChartContainer") + " > .sf-chart-container");
        <script type="text/javascript">
            $(function() {
                var $chartContainer = $('@divSelector');
                        
                $chartContainer.html("");
                        
                var width = $chartContainer.width();
                var height = $chartContainer.height();

                var data = @Html.Json(json);

                var myChart = SF.Chart.Factory.getGraphType('@ucTc.Value.Chart.ChartType.ToString()');
                
                eval(myChart.createChartSVG('@divSelector') + myChart.paintChart('@divSelector'));

                $("#" + SF.compose("@ucTc.ControlID", "sfFullScreen")).on("mousedown", function(e){
                    SF.Chart.getFor('@ucTc.ControlID').fullScreen(e);
                });
            });
        </script>
    
    }
}