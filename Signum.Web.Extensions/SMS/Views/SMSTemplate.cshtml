@using Signum.Engine
@using Signum.Entities.SMS
@using Signum.Entities
@using Signum.Web
@using Signum.Web.SMS
@using Signum.Engine.SMS
@using Signum.Utilities
@using Signum.Web.Mailing


@Html.ScriptCss("~/SMS/Content/SMS.css")

@using (var tc = Html.TypeContext<SMSTemplateDN>())
{   
    @Html.ValueLine(tc, s => s.Name)
    @Html.ValueLine(tc, s => s.Active, vl => vl.ReadOnly = true)
    @Html.ValueLine(tc, s => s.StartDate)
    @Html.ValueLine(tc, s => s.EndDate) 
    
    @Html.ValueLine(tc, s => s.From) 
    @Html.ValueLine(tc, s => s.Certified)
    @Html.ValueLine(tc, s => s.EditableMessage)
    
    @Html.ValueLine(tc, s => s.RemoveNoSMSCharacters)
    @Html.ValueLine(tc, s => s.MessageLengthExceeded)
    
    <div class="clearall"></div>
    <div id="sfTemplateLiterals">
        @using (Html.FieldInline())
        {
            @Html.EntityCombo(tc, s => s.AssociatedType, ec =>
            {
                ec.Data = SMSLogic.RegisteredDataObjectProviders();
                ec.ComboHtmlProperties["class"] = "sf-associated-type";
                ec.ComboHtmlProperties["data-url"] = Url.Action<SMSController>(s => s.GetLiteralsForType(ec.Prefix));
                ec.ComboHtmlProperties["data-control-id"] = ec.Prefix;
                ec.AttachFunction = new JsLineFunction(SMSClient.Module, "attachAssociatedType");
            })
        }
        @(new HtmlTag("select").Attr("multiple", "multiple").Id("sfLiterals").ToHtml())
        <br />
        <input type="button" class="sf-button" id="sfInsertLiteral" value="@SmsMessage.Insert.NiceToString()" />
    </div>
    
    <div class="sf-tabs-repeater sf-sms-template-messages">
        @Html.EntityRepeater(tc, e => e.Messages, er =>
        {
            er.AttachFunction = new JsLineFunction(MailingClient.TabsRepeaterModule, "attachTabRepeater");
            er.PreserveViewData = true;
        })
    </div>
}

@*@Html.RegisterUrls(new Dictionary<string, string> 
{ 
    { "getDictionaries", Url.Action<SMSController>(s => s.GetDictionaries()) },
    { "removeCharacters", Url.Action<SMSController>(s => s.RemoveNoSMSCharacters("")) }
})*@