@using Signum.Engine
@using Signum.Entities.SMS;
@using Signum.Web;
@using Signum.Web.SMS;

@Html.ScriptCss("~/SMS/Content/SMS.css")

@using (var e = Html.TypeContext<SMSMessageDN>())
{   
    @Html.ValueLine(e, s => s.MessageID, vl =>
    {
        vl.Visible = !e.Value.IsNew;
        vl.ReadOnly = true;
    })
    @Html.EntityLine(e, s => s.Template, vl => 
    {
        vl.Create = false;
        vl.Remove = false;
        vl.HideIfNull = true;
    })
    @Html.ValueLine(e, s => s.DestinationNumber, vl => vl.ReadOnly = !e.Value.IsNew)
    @Html.ValueLine(e, s => s.Message, vl =>
        {
            vl.ValueLineType = ValueLineType.TextArea;
            vl.ValueHtmlProps["cols"] = "30";
            vl.ValueHtmlProps["rows"] = "6";
            vl.ReadOnly = (e.Value.State != SMSMessageState.Created);
        })
    if(e.Value.State == SMSMessageState.Created) {
        <div id="sfCharactersLeft" data-url="@(Url.Action<SMSController>(s => s.GetDictionaries()))">
            <p>Remaining characters: <span id="sfCharsLeft"></span></p>
        </div>
        <div>
            <input type="button" class="sf-button" id="sfRemoveNoSMSChars" value="Remove non valid characters" data-url="@(Url.Action<SMSController>(s => s.RemoveNoSMSCharacters("")))"/>
        </div>
    }
    <br />
    @Html.ValueLine(e, s => s.From, vl => vl.ReadOnly = (e.Value.State != SMSMessageState.Created))

    if (e.Value.State != SMSMessageState.Created)
    {
        @Html.ValueLine(e, s => s.SendDate, vl => vl.ReadOnly = true)
        @Html.ValueLine(e, s => s.State, vl => vl.ReadOnly = true)
    }
}

