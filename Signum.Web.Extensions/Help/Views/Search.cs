//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Entities.Reflection;
    using Signum.Engine.Help;
    using Signum.Engine.WikiMarkup;
    using Signum.Web.Help;
    using Signum.Web.Extensions;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Help/Views/Search.cshtml")]
    public class _Page_Help_Views_Search_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_Help_Views_Search_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {






DefineSection("head", () => {

WriteLiteral("\r\n    ");


Write(Html.ScriptCss("~/help/Content/help.css"));

WriteLiteral("\r\n");


});

WriteLiteral("\r\n<script type=\"text/javascript\">\r\n    function ShowMore(elem) {\r\n        $(elem)" +
".siblings(\"ul\").children(\".show-on-more\").show();\r\n        $(elem).hide();\r\n    " +
"}\r\n</script>\r\n<div class=\"grid_16\" id=\"entityContent\">\r\n    <h1>\r\n        Buscad" +
"or</h1>\r\n");


       List<List<SearchResult>> results = (List<List<SearchResult>>)Model;
       string q = Request.Params["q"];
       int maxResults = 3;
       int count = results.Count;
    

WriteLiteral("    <p id=\"title\">");


             Write(count);

WriteLiteral(" ");


                     Write(count == 1 ? "resultado" : "resultados");

WriteLiteral("\r\n        para <b>");


           Write(q);

WriteLiteral("</b> (en ");


                      Write(ViewData["time"]);

WriteLiteral(" ms)</p>\r\n    <hr />\r\n    <ul>\r\n");


         foreach (var v in results)
        {
            int currentResults = 0;

WriteLiteral("            <li class=\"result\"><span class=\"entityName\">");


                                                    Write((v[0].Type != null ? v[0].Type.NiceName() : v[0].ObjectName).AddHtml("<b>", "</b>", q));

WriteLiteral("</span>\r\n                <ul>\r\n");


                     foreach (var sr in v)
                    {
                        currentResults++;               


WriteLiteral("                        <li class=\"content ");


                                       Write(currentResults > maxResults ? "show-on-more" : "");

WriteLiteral("\"><span class=\"typeSearchResult ");


                                                                                                                          Write(sr.TypeSearchResult.ToString());

WriteLiteral("\">");


                                                                                                                                                           Write(sr.TypeSearchResult.ToString());

WriteLiteral("</span>\r\n                            <a href=\"");


                                Write(sr.Link);

WriteLiteral("\">\r\n");


                                   string content = sr.Content.WikiParse(HelpClient.NoLinkWikiSettings).AddHtml("<b>", "</b>", q);
                                   string[] fragments = content.Split(new[] { " | " }, StringSplitOptions.RemoveEmptyEntries);


                                 if (fragments.Length == 1)
                                {
                                    
                               Write(fragments[0]);

                                                 
                                }
                                else
                                {

WriteLiteral("                                    <span class=\"area\">");


                                                  Write(fragments[0]);

WriteLiteral("</span> ");


                                                                            
                                                                       Write(fragments.Skip(1).ToString(" | "));

                                                                                                              
                                }
WriteLiteral(" </a></li>\r\n");


                    }

WriteLiteral("                </ul>\r\n");


                 if (currentResults > maxResults)
                {

WriteLiteral("                    <a class=\"more-link\" onclick=\"javascript:ShowMore(this);\">Mos" +
"trar ");


                                                                                  Write(v.Count - maxResults);

WriteLiteral("\r\n                        ");


                    Write((v.Count - maxResults) != 1 ? "resultados restantes" : "resultado restante");

WriteLiteral("</a>\r\n");


                }

WriteLiteral("            </li>\r\n");


        }

WriteLiteral("    </ul>\r\n</div>\r\n");


        }
    }
}
