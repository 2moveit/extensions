//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Entities.Reflection;
    using Signum.Engine;
    using Signum.Engine.Help;
    using Signum.Web.Help;
    using Signum.Web.Extensions;
    using Signum.Entities.DynamicQuery;
    using Signum.Entities.Operations;
    using Signum.Engine.WikiMarkup;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Help/Views/ViewEntity.cshtml")]
    public class _Page_Help_Views_ViewEntity_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_Help_Views_ViewEntity_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {








WriteLiteral("\r\n");


DefineSection("head", () => {

WriteLiteral("\r\n    ");


Write(Html.ScriptCss("~/help/Content/help.css"));

WriteLiteral("\r\n    ");


Write(Html.ScriptsJs("~/signum/Scripts/SF_Globals.js"));

WriteLiteral("\r\n");


});

WriteLiteral("\r\n\r\n");


   Html.RenderPartial(HelpClient.Menu);

WriteLiteral("\r\n");


   EntityHelp eh = (EntityHelp)Model;
   ViewBag.Title = eh.Type.NiceName();


WriteLiteral("\r\n<form action=\"");


         Write(HelpLogic.EntityUrl(eh.Type));

WriteLiteral("/Save\" id=\"form-save\">\r\n<div class=\"grid_16\" id=\"entityName\">\r\n    <span class=\'s" +
"hortcut\'>[e:");


                         Write(eh.Type.Name);

WriteLiteral("]</span>\r\n    <h1 title=\"");


          Write(eh.Type.Namespace);

WriteLiteral("\">");


                              Write(eh.Type.NiceName());

WriteLiteral("</h1>\r\n    ");


Write(Html.TextArea("description", eh.Description, 5, 80, new { @class = "editable" }));

WriteLiteral("\r\n    <span class=\"editor\" id=\"description-editor\">\r\n        ");


   Write(eh.Description.WikiParse(HelpClient.DefaultWikiSettings).Replace("\n", "<p>"));

WriteLiteral("\r\n    </span>\r\n</div>\r\n<div class=\"clear\">\r\n</div>\r\n<div id=\"entityContent\" class" +
"=\"grid_12\">\r\n");


     if (eh.Properties != null && eh.Properties.Count > 0)
    {

WriteLiteral("        <div id=\"properties\">\r\n            <h2>\r\n                Propiedades</h2>" +
"\r\n            <dl>\r\n");


                   
        var a = TreeHelper.ToTreeS(eh.Properties, kvp =>
        {
            int index = kvp.Key.LastIndexOfAny(new[] { '.', '/' });
            if (index == -1)
                return null;
            string s = kvp.Key.Substring(0, index);
            return new KeyValuePair<string, PropertyHelp>(s, eh.Properties[s]);
        });
        ViewDataDictionary vdd = new ViewDataDictionary();
        vdd.Add("EntityName", eh.Type.Name);
                


                 foreach (var node in a)
                {
                    Html.RenderPartial(HelpClient.ViewEntityPropertyUrl, node, vdd);
                }

WriteLiteral("            </dl>\r\n        </div>\r\n");


    }


     if (eh.Queries.TryCS(queries => queries.Count > 0) != null)
    {

WriteLiteral("        <div id=\"queries\">\r\n            <h2>\r\n                Consultas</h2>\r\n   " +
"         <dl>\r\n");


                 foreach (var mq in eh.Queries)
                {

WriteLiteral("                    <span class=\'shortcut\'>[q:");


                                         Write(QueryUtils.GetQueryUniqueKey(mq.Key));

WriteLiteral("]</span>\r\n");



WriteLiteral("                    <dt>");


                   Write(QueryUtils.GetNiceName(mq.Key));

WriteLiteral("</dt>\r\n");



WriteLiteral("                    <dd>\r\n                        <img src=\'help/Images/table.gif" +
"\' title=\'Ver columnas\' style=\'float: right\' onclick=\"javascript:$(this).siblings" +
"(\'.query-columns\').toggle(\'fast\');\" />");


                                                                                                                                                                        Write(mq.Value.Info.WikiParse(HelpClient.DefaultWikiSettings));

WriteLiteral("\r\n                        ");


                   Write(Html.TextArea("q-" + QueryUtils.GetQueryUniqueKey(mq.Key).Replace(".", "_"), mq.Value.UserDescription, new { @class = "editable" }));

WriteLiteral("\r\n                        <span class=\"editor\" id=\"q-");


                                              Write(QueryUtils.GetQueryUniqueKey(mq.Key).Replace(".", "_"));

WriteLiteral("-editor\">\r\n                            ");


                       Write(mq.Value.UserDescription.WikiParse(HelpClient.DefaultWikiSettings).Replace("\n", "<p>"));

WriteLiteral("\r\n                        </span>\r\n                        <div class=\'query-colu" +
"mns\'>\r\n                            <hr />\r\n                            <table wi" +
"dth=\"100%\">\r\n");


                                 foreach (var qc in mq.Value.Columns)
                                {

WriteLiteral("                                    <tr>\r\n                                       " +
" <td>\r\n                                            <b>");


                                          Write(qc.Value.Name.NiceName());

WriteLiteral("</b> ");


                                                                        Write(qc.Value.Info);

WriteLiteral("\r\n                                        </td>\r\n                                " +
"        <td>");


                                       Write(qc.Value.Info);

WriteLiteral("\r\n                                        </td>\r\n                                " +
"    </tr>\r\n");



WriteLiteral("                                    <tr>\r\n                                       " +
" <td>\r\n                                        </td>\r\n                          " +
"              <td>");


                                       Write(Html.TextArea("c-" + QueryUtils.GetQueryUniqueKey(mq.Key).Replace(".", "_") + "." + qc.Key, qc.Value.UserDescription, new { @class = "editable" }));

WriteLiteral("\r\n                                            <span class=\"editor\" id=\"qc-");


                                                                    Write(QueryUtils.GetQueryUniqueKey(mq.Key).Replace(".", "_") + "." + qc.Key);

WriteLiteral("\">\r\n                                                ");


                                           Write(qc.Value.UserDescription.WikiParse(HelpClient.DefaultWikiSettings).Replace("\n", "<p>"));

WriteLiteral("\r\n                                            </span>\r\n                          " +
"              </td>\r\n                                    </tr>\r\n");


                                }

WriteLiteral("                            </table>\r\n                            <hr />\r\n       " +
"                 </div>\r\n                    </dd>\r\n");


                }

WriteLiteral("            </dl>\r\n        </div>\r\n");


    }


     if (eh.Operations != null && eh.Operations.Count > 0)
    {

WriteLiteral("        <div id=\"operations\">\r\n            <h2>\r\n                Operaciones</h2>" +
"\r\n            <dl>\r\n");


                 foreach (var p in eh.Operations)
                {

WriteLiteral("                    <span class=\'shortcut\'>[o:");


                                         Write(OperationDN.UniqueKey(p.Key));

WriteLiteral("]</span>\r\n");



WriteLiteral("                    <dt>");


                   Write(p.Key.NiceToString());

WriteLiteral("</dt>\r\n");



WriteLiteral("                    <dd>\r\n                        ");


                   Write(p.Value.Info.WikiParse(HelpClient.DefaultWikiSettings));

WriteLiteral("\r\n                        ");


                   Write(Html.TextArea("o-" + OperationDN.UniqueKey(p.Key), p.Value.UserDescription, new { @class = "editable" }));

WriteLiteral("\r\n                        <span class=\"editor\" id=\"o-");


                                              Write(OperationDN.UniqueKey(p.Key).Replace(".", "_"));

WriteLiteral("-editor\">\r\n                            ");


                       Write(p.Value.UserDescription.WikiParse(HelpClient.DefaultWikiSettings).Replace("\n", "<p>"));

WriteLiteral("\r\n                        </span>\r\n                    </dd>\r\n");


                }

WriteLiteral("            </dl>\r\n        </div>\r\n");


    }

WriteLiteral("</div>\r\n<div class=\"grid_4\">\r\n    <div class=\"sidebar\">\r\n        <h3>\r\n          " +
"  Temas relacionados</h3>\r\n        <ul>\r\n");


               List<Type> types = (List<Type>)ViewData["nameSpace"];


             foreach (Type t in types)
            {
                if (t != eh.Type)
                {

WriteLiteral("                <li><a href=\"");


                        Write(HelpLogic.EntityUrl(t));

WriteLiteral("\">");


                                                 Write(t.NiceName());

WriteLiteral("</a></li>\r\n");


                }
                else
                {

WriteLiteral("                <li class=\"type-selected\">");


                                     Write(t.NiceName());

WriteLiteral("</li>\r\n");


                }
            }

WriteLiteral("        </ul>\r\n    </div>\r\n</div>\r\n<div class=\"clear\">\r\n</div>\r\n</form>\r\n");


        }
    }
}
