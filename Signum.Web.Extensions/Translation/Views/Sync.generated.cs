#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Signum.Web.Extensions.Translation.Views
{
    using System;
    using System.Collections.Generic;
    
    #line 2 "..\..\Translation\Views\Sync.cshtml"
    using System.Globalization;
    
    #line default
    #line hidden
    using System.IO;
    using System.Linq;
    using System.Net;
    
    #line 3 "..\..\Translation\Views\Sync.cshtml"
    using System.Reflection;
    
    #line default
    #line hidden
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using Signum.Entities;
    
    #line 7 "..\..\Translation\Views\Sync.cshtml"
    using Signum.Entities.Translation;
    
    #line default
    #line hidden
    
    #line 4 "..\..\Translation\Views\Sync.cshtml"
    using Signum.Utilities;
    
    #line default
    #line hidden
    using Signum.Web;
    
    #line 5 "..\..\Translation\Views\Sync.cshtml"
    using Signum.Web.Translation;
    
    #line default
    #line hidden
    
    #line 6 "..\..\Translation\Views\Sync.cshtml"
    using Signum.Web.Translation.Controllers;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "2.0.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Translation/Views/Sync.cshtml")]
    public partial class Sync : System.Web.Mvc.WebViewPage<LocalizedAssemblyChanges>
    {
        public Sync()
        {
        }
        public override void Execute()
        {








            
            #line 8 "..\..\Translation\Views\Sync.cshtml"
  
    CultureInfo culture = ViewBag.Culture;

    ViewBag.Title = TranslationMessage.Synchronize0In1.NiceToString().Formato(Model.LocalizedAssembly.Assembly.GetName().Name, Model.LocalizedAssembly.Culture.DisplayName);

    Func<IEnumerable<string>, List<SelectListItem>> selectListItems = values =>
    {
        var items = values.Select(s => new SelectListItem { Value = s, Text = s }).ToList();

        if (values.Count() > 1 && values.Distinct().Count() == 1)
        {
            items.First().Selected = true;
            items.Insert(0, new SelectListItem { Value = "", Text = "-" });
        }
        else
        {
            items.Insert(0, new SelectListItem { Value = "", Text = "-", Selected = true });
        }

        return items;
    };

    Func<LocalizedType, string> locKey = lt => lt.Type.Name + "." + lt.Assembly.Culture.Name;


            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 33 "..\..\Translation\Views\Sync.cshtml"
Write(Html.ScriptCss("~/Translation/Content/Translation.css"));

            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 34 "..\..\Translation\Views\Sync.cshtml"
Write(Html.ScriptsJs("~/Translation/Content/Translation.js"));

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n");


            
            #line 36 "..\..\Translation\Views\Sync.cshtml"
 if (Model.Types.IsEmpty())
{

            
            #line default
            #line hidden
WriteLiteral("    <h2>");


            
            #line 38 "..\..\Translation\Views\Sync.cshtml"
   Write(TranslationMessage._0AlreadySynchronized.NiceToString().Formato(Model.LocalizedAssembly.Assembly.GetName().Name));

            
            #line default
            #line hidden
WriteLiteral("</h2>   \r\n");


            
            #line 39 "..\..\Translation\Views\Sync.cshtml"
}
else
{

            
            #line default
            #line hidden
WriteLiteral("   <h2>");


            
            #line 42 "..\..\Translation\Views\Sync.cshtml"
  Write(ViewBag.Title);

            
            #line default
            #line hidden
WriteLiteral("</h2>\r\n");


            
            #line 43 "..\..\Translation\Views\Sync.cshtml"
    
    using (Html.BeginForm())
    {

            
            #line default
            #line hidden
WriteLiteral("        <table id=\"results\" style=\"width: 100%; margin: 0px\" class=\"st\" pluralAnd" +
"Gender=\"");


            
            #line 46 "..\..\Translation\Views\Sync.cshtml"
                                                                                    Write(Url.Action((TranslationController tc) => tc.PluralAndGender()));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n");


            
            #line 47 "..\..\Translation\Views\Sync.cshtml"
             foreach (var typeChanges in Model.Types)
            {

            
            #line default
            #line hidden
WriteLiteral("                <thead>\r\n                    <tr>\r\n                        <th cl" +
"ass=\"leftCell\">");


            
            #line 51 "..\..\Translation\Views\Sync.cshtml"
                                        Write(TranslationMessage.Type.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("</th>\r\n                        <th colspan=\"4\" class=\"titleCell\">");


            
            #line 52 "..\..\Translation\Views\Sync.cshtml"
                                                     Write(typeChanges.Type.Type.Name);

            
            #line default
            #line hidden
WriteLiteral("</th>\r\n                    </tr>\r\n                </thead>\r\n");


            
            #line 55 "..\..\Translation\Views\Sync.cshtml"
            
                if (typeChanges.TypeConflict != null)
                {

                    bool hasGenderOption = typeChanges.Type.Options.IsSet(DescriptionOptions.Gender);
                    bool hasPlural = typeChanges.Type.Options.IsSet(DescriptionOptions.PluralDescription);

                    foreach (var tc in typeChanges.TypeConflict)
                    {
                        var locType = tc.Value.Original;

                        var hasGender = hasGenderOption && NaturalLanguageTools.HasGenders(tc.Key);

            
            #line default
            #line hidden
WriteLiteral("                <tr>\r\n                    <th class=\"leftCell\">");


            
            #line 68 "..\..\Translation\Views\Sync.cshtml"
                                    Write(tc.Key.Name);

            
            #line default
            #line hidden
WriteLiteral("</th>\r\n                    <th class=\"smallCell monospaceCell\">\r\n");


            
            #line 70 "..\..\Translation\Views\Sync.cshtml"
                         if (hasGender)
                        {
                            
            
            #line default
            #line hidden
            
            #line 72 "..\..\Translation\Views\Sync.cshtml"
                        Write(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: false, culture: locType.Assembly.Culture) : "-");

            
            #line default
            #line hidden
            
            #line 72 "..\..\Translation\Views\Sync.cshtml"
                                                                                                                                                                    
                        }

            
            #line default
            #line hidden
WriteLiteral("                    </th>\r\n                    <th class=\"monospaceCell\">\r\n      " +
"                  ");


            
            #line 76 "..\..\Translation\Views\Sync.cshtml"
                   Write(locType.Description);

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </th>\r\n                    <th class=\"smallCell monospaceCe" +
"ll\">\r\n");


            
            #line 79 "..\..\Translation\Views\Sync.cshtml"
                         if (hasGender && hasPlural)
                        {
                            
            
            #line default
            #line hidden
            
            #line 81 "..\..\Translation\Views\Sync.cshtml"
                        Write(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: true, culture: locType.Assembly.Culture) : "-");

            
            #line default
            #line hidden
            
            #line 81 "..\..\Translation\Views\Sync.cshtml"
                                                                                                                                                                   
                        }

            
            #line default
            #line hidden
WriteLiteral("                    </th>\r\n                    <th class=\"monospaceCell\">\r\n");


            
            #line 85 "..\..\Translation\Views\Sync.cshtml"
                         if (hasPlural)
                        {
                            
            
            #line default
            #line hidden
            
            #line 87 "..\..\Translation\Views\Sync.cshtml"
                        Write(locType.PluralDescription ?? "-");

            
            #line default
            #line hidden
            
            #line 87 "..\..\Translation\Views\Sync.cshtml"
                                                               
                        }

            
            #line default
            #line hidden
WriteLiteral("                    </th>\r\n                </tr>\t \r\n");


            
            #line 91 "..\..\Translation\Views\Sync.cshtml"
                    }

                    {
                        var locType = typeChanges.Type;

                        var hasGender = hasGenderOption && NaturalLanguageTools.HasGenders(culture);
                    

            
            #line default
            #line hidden
WriteLiteral("                <tr>\r\n                    <th class=\"leftCell\">");


            
            #line 99 "..\..\Translation\Views\Sync.cshtml"
                                    Write(culture.Name);

            
            #line default
            #line hidden
WriteLiteral("</th>\r\n                    <th class=\"smallCell monospaceCell\">\r\n");


            
            #line 101 "..\..\Translation\Views\Sync.cshtml"
                         if (hasGender)
                        {
                            var gd = NaturalLanguageTools.GenderDetectors.TryGetC(locType.Assembly.Culture.TwoLetterISOLanguageName);

                            var list = gd.TryCC(a => a.Pronoms).EmptyIfNull()
                                    .Select(pi => new SelectListItem { Value = pi.Gender.ToString(), Text = pi.Singular, Selected = pi.Gender == locType.Gender }).ToList();

                            if (typeChanges.Type.Gender == null)
                            {
                                list.Insert(0, new SelectListItem { Value = "", Text = "-", Selected = true });
                            }
                            
            
            #line default
            #line hidden
            
            #line 112 "..\..\Translation\Views\Sync.cshtml"
                       Write(Html.DropDownList(locKey(typeChanges.Type) + ".Gender", list));

            
            #line default
            #line hidden
            
            #line 112 "..\..\Translation\Views\Sync.cshtml"
                                                                                          ;
                        }

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </th>\r\n                    <th class=\"monospaceCell\">\r\n");


            
            #line 117 "..\..\Translation\Views\Sync.cshtml"
                            
                        var items = selectListItems(typeChanges.TypeConflict.Values.Select(a => a.Translated));

                            
            
            #line default
            #line hidden
            
            #line 120 "..\..\Translation\Views\Sync.cshtml"
                       Write(Html.DropDownList(locKey(typeChanges.Type) + ".Description", items, new { style = "width:90%" }));

            
            #line default
            #line hidden
            
            #line 120 "..\..\Translation\Views\Sync.cshtml"
                                                                                                                             ;
                        

            
            #line default
            #line hidden
WriteLiteral("                        <a href=\"#\" class=\"edit\">");


            
            #line 122 "..\..\Translation\Views\Sync.cshtml"
                                            Write(TranslationMessage.Edit.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("</a>\r\n                    </th>\r\n                    <th class=\"smallCell monospa" +
"ceCell\">\r\n");


            
            #line 125 "..\..\Translation\Views\Sync.cshtml"
                         if (hasGender && hasPlural)
                        {
                            
            
            #line default
            #line hidden
            
            #line 127 "..\..\Translation\Views\Sync.cshtml"
                        Write(locType.Gender != null ? NaturalLanguageTools.GetPronom(locType.Gender.Value, plural: true, culture: locType.Assembly.Culture) : "-");

            
            #line default
            #line hidden
            
            #line 127 "..\..\Translation\Views\Sync.cshtml"
                                                                                                                                                                      
                        }

            
            #line default
            #line hidden
WriteLiteral("                    </th>\r\n                    <th class=\"monospaceCell\">\r\n");


            
            #line 131 "..\..\Translation\Views\Sync.cshtml"
                         if (hasPlural)
                        {
                            
            
            #line default
            #line hidden
            
            #line 133 "..\..\Translation\Views\Sync.cshtml"
                       Write(Html.TextArea(locKey(locType) + ".PluralDescription", locType.PluralDescription, new { style = "width:90%;height:16px" }));

            
            #line default
            #line hidden
            
            #line 133 "..\..\Translation\Views\Sync.cshtml"
                                                                                                                                                         
                        }

            
            #line default
            #line hidden
WriteLiteral("                    </th>\r\n                </tr>\r\n");


            
            #line 137 "..\..\Translation\Views\Sync.cshtml"
                
                    }
                }

                {

                    var locType = typeChanges.Type;
                    foreach (var conflict in typeChanges.MemberConflicts)
                    {


            
            #line default
            #line hidden
WriteLiteral("                <tr>\r\n                    <th class=\"leftCell\">");


            
            #line 148 "..\..\Translation\Views\Sync.cshtml"
                                    Write(TranslationMessage.Member.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </th>\r\n                    <th colspan=\"4\">");


            
            #line 150 "..\..\Translation\Views\Sync.cshtml"
                               Write(conflict.Key);

            
            #line default
            #line hidden
WriteLiteral("\r\n                    </th>\r\n                </tr>\r\n");


            
            #line 153 "..\..\Translation\Views\Sync.cshtml"
                        foreach (var mc in conflict.Value)
                        {

            
            #line default
            #line hidden
WriteLiteral("                <tr>\r\n                    <td class=\"leftCell\">");


            
            #line 156 "..\..\Translation\Views\Sync.cshtml"
                                    Write(mc.Key.Name);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                    <td colspan=\"4\" class=\"monospaceCell\">\r\n              " +
"          ");


            
            #line 158 "..\..\Translation\Views\Sync.cshtml"
                   Write(mc.Value.Original);

            
            #line default
            #line hidden
WriteLiteral("\r\n\r\n                    </td>\r\n                </tr>\r\n");


            
            #line 162 "..\..\Translation\Views\Sync.cshtml"
                        }

            
            #line default
            #line hidden
WriteLiteral("                <tr>\r\n                    <td class=\"leftCell\">");


            
            #line 164 "..\..\Translation\Views\Sync.cshtml"
                                    Write(culture.Name);

            
            #line default
            #line hidden
WriteLiteral("</td>\r\n                    <td colspan=\"4\" class=\"monospaceCell\">\r\n");


            
            #line 166 "..\..\Translation\Views\Sync.cshtml"
                            
                        var items = selectListItems(conflict.Value.Values.Select(a => a.Translated));
                            
            
            #line default
            #line hidden
            
            #line 168 "..\..\Translation\Views\Sync.cshtml"
                       Write(Html.DropDownList(locKey(typeChanges.Type) + ".Member." + conflict.Key, items));

            
            #line default
            #line hidden
            
            #line 168 "..\..\Translation\Views\Sync.cshtml"
                                                                                                           ;
                        

            
            #line default
            #line hidden
WriteLiteral("                        <a href=\"#\" class=\"edit\">");


            
            #line 170 "..\..\Translation\Views\Sync.cshtml"
                                            Write(TranslationMessage.Edit.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("</a>\r\n                    </td>\r\n                </tr>\r\n");


            
            #line 173 "..\..\Translation\Views\Sync.cshtml"
                    }
                }

            }

            
            #line default
            #line hidden
WriteLiteral("        </table>\r\n");



WriteLiteral("    <input type=\"submit\" value=\"");


            
            #line 178 "..\..\Translation\Views\Sync.cshtml"
                           Write(TranslationMessage.Save.NiceToString());

            
            #line default
            #line hidden
WriteLiteral("\" />\r\n");


            
            #line 179 "..\..\Translation\Views\Sync.cshtml"
    }
}

            
            #line default
            #line hidden
WriteLiteral(@"
<script>
    $(function () {
        $(""a.edit"").bind(""click"", function () {
            var select = $(this).parent().find(""select"");
            var input = $(""<textarea/>"").attr(""type"", ""text"")
                .attr(""name"", select.attr(""name""))
                .val(select.val())
                .attr(""style"", ""width:90%; height:16px"");
            select.after(input);
            select.remove();
            $(this).remove();

            return false;
        });
    });
</script>
");


        }
    }
}
#pragma warning restore 1591
