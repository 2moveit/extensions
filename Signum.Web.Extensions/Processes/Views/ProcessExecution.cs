//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Entities.Processes;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Processes/Views/ProcessExecution.cshtml")]
    public class _Page_Processes_Views_ProcessExecution_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {


        public _Page_Processes_Views_ProcessExecution_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {

WriteLiteral("\r\n");


Write(Html.DynamicCss("~/processes/Content/Processes.css"));

WriteLiteral("\r\n\r\n");


 using (var e = Html.TypeContext<ProcessExecutionDN>())
{
    
Write(Html.ValueLine(e, f => f.State, f => f.ReadOnly = true));

                                                            
    
Write(Html.EntityLine(e, f => f.Process));

                                       
    
Write(Html.EntityLine(e, f => f.ProcessData, f => f.ReadOnly = true));

                                                                   
    
Write(Html.ValueLine(e, f => f.CreationDate));

                                           
    
Write(Html.ValueLine(e, f => f.PlannedDate, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                            
    
Write(Html.ValueLine(e, f => f.CancelationDate, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                                
    
Write(Html.ValueLine(e, f => f.QueuedDate, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                           
    
Write(Html.ValueLine(e, f => f.ExecutionStart, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                               
    
Write(Html.ValueLine(e, f => f.ExecutionEnd, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                             
    
Write(Html.ValueLine(e, f => f.SuspendDate, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                            
    
Write(Html.ValueLine(e, f => f.ExceptionDate, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                              
    
Write(Html.EntityLine(e, f => f.Exception, f => { f.HideIfNull = true; f.ReadOnly = true; }));

                                                                                           
    
Write(Html.ValueLine(e, f => f.Progress, f => f.ReadOnly = true));

                                                               
    
    if (e.Value.State == ProcessState.Executing)
    {

WriteLiteral("    ");

WriteLiteral("Progress:\r\n");



WriteLiteral("    <br />\r\n");



WriteLiteral("    <br />\r\n");



WriteLiteral("    <div class=\"progressContainer\">\r\n        <div class=\"progressBar\" id=\"progres" +
"sBar\" style=\"height: 100%; width: ");


                                                                         Write(Math.Round((double)e.Value.Progress, 0));

WriteLiteral("%;\">\r\n        </div>\r\n    </div>\r\n");




WriteLiteral("    <script type=\"text/javascript\">\r\n    $(function() {\r\n        var idProcess = " +
"\'");


                    Write(e.Value.Id);

WriteLiteral("\';\r\n        var idPrefix = \'");


                   Write(e.ControlID);

WriteLiteral("\';\r\n\r\n        refreshUpdate(idProcess,idPrefix);\r\n    })\r\n\r\n    function refreshU" +
"pdate(idProcess, idPrefix) {\r\n        setTimeout(function() {\r\n\r\n            $.p" +
"ost(\"");


               Write(Url.Action("GetProgressExecution", "Process"));

WriteLiteral(@""", { id: idProcess },
            function(data) {
                $(""#progressBar"").width(data + '%');
                if (data < 100) {
                    refreshUpdate(idProcess, idPrefix);
                }
                else {
                    if (SF.isEmpty(idPrefix)) {
                        /*SF.reloadEntity(""");


                                      Write(Url.Action("FinishProcessNormalPage", "Process"));

WriteLiteral(@""", idPrefix);*/
                    }
                    else {
                        $(""#"" + idPrefix.compose(""externalPopupDiv"")).remove();
                        new SF.ViewNavigator({
                            type: ""ProcessExecutionDN"",
                            id: idProcess,
                            prefix: idPrefix
                        }).createOk();
                    }
                }
            });
        }, 2000);
     }
    </script>
");



    }
} 


        }
    }
}
