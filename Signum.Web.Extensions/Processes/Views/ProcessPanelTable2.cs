//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.544
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Utilities.ExpressionTrees;
    using Signum.Engine.Processes;
    using Signum.Web.Processes;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Processes/Views/ProcessPanelTable.cshtml")]
    public class _Page_Processes_Views_ProcessPanelTable_cshtml : System.Web.Mvc.WebViewPage<ProcessLogicState>
    {


        public _Page_Processes_Views_ProcessPanelTable_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {




WriteLiteral("<div id=\"processMainDiv\">\r\n        <br />\r\n    <h2>ProcessLogic state</h2>\r\n   \r\n" +
"    State: <strong>\r\n");


         if (Model.Running)
        {

WriteLiteral("            <span style=\"color: Green\">RUNNING</span>\r\n");


        }
        else
        {

WriteLiteral("            <span style=\"color: Red\">STOPPED</span>\r\n");


        }
WriteLiteral("</strong>\r\n    <br />\r\n    MaxDegreeOfParallelism: ");


                       Write(Model.MaxDegreeOfParallelism);

WriteLiteral("\r\n    <br />\r\n    InitialDelayMiliseconds: ");


                        Write(Model.InitialDelayMiliseconds);

WriteLiteral("\r\n    <br />\r\n    NextPlannedExecution: ");


                      Write(Model.NextPlannedExecution.TryToString() ?? "-None-");

WriteLiteral(@"
    <br />
    <table class=""sf-search-results sf-stats-table"">
        <thead>
            <tr>
                <th>
                    Process
                </th>
                <th>
                    State
                </th>
                <th>
                    Progress
                </th>
                <th>
                    IsCancellationRequested
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td colspan=""4"">
                    <b>Executing (");


                             Write(Model.Executing.Count);

WriteLiteral(")</b>\r\n                </td>\r\n            </tr>\r\n");


             foreach (var item in Model.Executing)
            {

WriteLiteral("                <tr>\r\n                    <td>");


                   Write(Html.LightEntityLine(item.ProcessExecution, true));

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(item.State);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(item.Progress);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(item.IsCancellationRequested);

WriteLiteral("\r\n                    </td>\r\n                </tr>\r\n");


            }

WriteLiteral("            <tr>\r\n                <td colspan=\"4\">\r\n                    <b>Queued" +
" (");


                          Write(Model.Queue.Count);

WriteLiteral(")</b>\r\n                </td>\r\n            </tr>\r\n");


             foreach (var item in Model.Queue)
            {

WriteLiteral("                <tr>\r\n                    <td>");


                   Write(Html.LightEntityLine(item.ProcessExecution, true));

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(item.State);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(item.Progress);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(item.IsCancellationRequested);

WriteLiteral("\r\n                    </td>\r\n                </tr>\r\n");


            }

WriteLiteral("        </tbody>\r\n    </table>\r\n\r\n    <br />\r\n    <h2>Latest Processes</h2>\r\n\r\n  " +
"  ");


Write(Html.SearchControl(new FindOptions(typeof(Signum.Entities.Processes.ProcessExecutionDN))
{
    OrderOptions = { new OrderOption("CreationDate", Signum.Entities.DynamicQuery.OrderType.Descending) },
    FilterMode = Signum.Web.FilterMode.Hidden,
    SearchOnLoad = true,
    ElementsPerPage = 10,
},new Context(null, "sc")));

WriteLiteral("\r\n    <br />\r\n</div>\r\n");


        }
    }
}
