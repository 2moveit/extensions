@using Signum.Engine
@using Signum.Entities.Mailing
@using Signum.Web.Mailing
@using Signum.Web.Files

<style type="text/css">
    .sf-email-message .sf-repeater-element
    {
        padding: 2px 10px;
    }

        .sf-email-message .sf-repeater-element legend
        {
            float: left;
            margin-right: 10px;
        }
</style>

@Html.ScriptCss("~/Mailing/Content/Mailing.css")


@using (var e = Html.TypeContext<EmailMessageDN>())
{
    <div class="sf-email-message">

        @using (var tabs = Html.Tabs(e))
        {
            tabs.Tab("sfEmailMessage", typeof(EmailMessageDN).NiceName(), @<text>
            @if (e.Value.State != EmailMessageState.Created)
            {
                e.ReadOnly = true;
            }

            <div style="float: left; margin: 10px">
                @Html.EntityLineDetail(e, f => f.From)
                @Html.EntityRepeater(e, f => f.Recipients)
                @Html.EntityRepeater(e, f => f.Attachments)
            </div>

            <fieldset style="float: left">
                <legend>Properties</legend>
                @Html.ValueLine(e, f => f.State)
                @Html.ValueLine(e, f => f.Sent)
                @Html.EntityLine(e, f => f.Exception)
                @Html.EntityLine(e, f => f.Template)
                @Html.EntityLine(e, f => f.Package)
                @Html.ValueLine(e, f => f.IsBodyHtml)
            </fieldset>

            <div class="clearall" />
            @Html.EntityLine(e, f => f.Target)
            @Html.ValueLine(e, f => f.Subject)
            @if (e.Value.State == EmailMessageState.Created)
            {
                @Html.ValueLine(e, f => f.Body, vl =>
                    {
                        vl.ValueLineType = ValueLineType.TextArea;
                        vl.ValueHtmlProps["style"] = "width:100%; height:180px;";
                    })

<script>
    $(function () {
                        @(new JsFunction(MailingClient.Module, "initHtmlEditor", e.Compose("Body")))
                    });
                </script>
            }
            else
            {
                var body = MailingClient.GetWebMailBody(e.Value.Body, new WebMailOptions
                {
                    Attachments = e.Value.Attachments,
                    UntrustedImage = null,
                    Url = Url,
                });
<h3>@EmailMessageMessage.Message.NiceToString():</h3>
<div>
                        @if (e.Value.IsBodyHtml)
                        {            
<iframe id="@e.Compose("iframe")" style="width:90%">
                                @Html.Raw(body)
                            </iframe>
<script>
    $(function () {
        var iframe = $("@e.Compose("iframe")");
        @(new JsFunction(MailingClient.Module, "activateIFrame", JsFunction.Literal("iframe")))
    });
                            </script>
                        }
                        else
                        {
<pre>
                            @Html.Raw(HttpUtility.HtmlEncode(e.Value.Body))
                        </pre>
                        }
            </div>
            }
            </text>);

            if (e.Value.Mixins.OfType<EmailReceptionMixin>().Any() && e.Value.Mixin<EmailReceptionMixin>().ReceptionInfo != null)
            {
                using (var ri = e.SubContext(f => f.Mixin<EmailReceptionMixin>().ReceptionInfo))
                {
                    tabs.Tab("sfEmailReceptionInfo", typeof(EmailReceptionInfoDN).NiceName(), @<text>
            <fieldset>
                <legend>Properties</legend>

                @Html.EntityLine(ri, f => f.Reception)
                @Html.ValueLine(ri, f => f.UniqueId)
                @Html.ValueLine(ri, f => f.SentDate)
                @Html.ValueLine(ri, f => f.ReceivedDate)
                @Html.ValueLine(ri, f => f.DeletionDate)

            </fieldset>

            <pre>
                        @ri.Value.RawContent
                </pre>
            </text>);
                }
            }
        }
    </div>
}
