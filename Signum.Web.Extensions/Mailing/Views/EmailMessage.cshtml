@using Signum.Engine
@using Signum.Entities.Mailing
@using Signum.Web.Files

<style type="text/css">
    .sf-email-message .sf-repeater-element
    {
        padding: 2px 10px;
    }

        .sf-email-message .sf-repeater-element legend
        {
            float: left;
            margin-right: 10px;
        }
</style>

@Html.ScriptCss("~/Mailing/Content/SF_Mailing.css")

<div class="sf-email-message">
    @using (var e = Html.TypeContext<EmailMessageDN>())
    {
        var hasReceptionMixin = e.Value.Mixins.OfType<EmailReceptionMixin>().Any();

        if (e.Value.State != EmailMessageState.Created)
        {
            e.ReadOnly = true;
        }
    
        <div style="float: left; margin: 10px">
            @Html.EntityLineDetail(e, f => f.From)
            @Html.EntityRepeater(e, f => f.Recipients)
            @Html.EntityRepeater(e, f => f.Attachments)
        </div>
    
        <fieldset style="float: left">
            <legend>Properties</legend>
            @Html.ValueLine(e, f => f.State)
            @Html.ValueLine(e, f => f.Sent)
            @if (e.Value.Mixins.OfType<EmailReceptionMixin>().Any())
            {
                using (var ri = e.SubContext(f => f.Mixin<EmailReceptionMixin>().ReceptionInfo))
                {
                @Html.ValueLine(ri, f => f.Reception)
                @Html.ValueLine(ri, f => f.UniqueId)
                @Html.ValueLine(ri, f => f.SentDate)
                @Html.ValueLine(ri, f => f.ReceivedDate)
                @Html.ValueLine(ri, f => f.DeletionDate)
                }
            }
            @Html.EntityLine(e, f => f.Exception)
            @Html.EntityLine(e, f => f.Template)
            @Html.EntityLine(e, f => f.Package)
            @Html.ValueLine(e, f => f.IsBodyHtml)
        </fieldset>
     
        <div class="clearall" />
        @Html.EntityLine(e, f => f.Target)
        @Html.ValueLine(e, f => f.Subject) 
            if (e.Value.State == EmailMessageState.Created)
            {
        @Html.ValueLine(e, f => f.Body, vl =>
        {
            vl.ValueLineType = ValueLineType.TextArea;
            vl.ValueHtmlProps["style"] = "width:100%; height:180px;";
        })

        @Html.ScriptsJs("~/Scripts/ckeditor/ckeditor.js")
        @Html.ScriptsJs("~/Mailing/Scripts/SF_Mailing.js")

        <script>
            $(function () {
                SF.Mailing.initHtmlEditor('@e.Compose("Body")');
            });
        </script>
            }
            else
            {
        <h3>@EmailMessageMessage.Message.NiceToString():</h3>
        <div>
            @{
                var body = Signum.Web.Mailing.MailingClient.GetWebMailBody(e.Value.Body, e.Value.Attachments);
            }
            @if (e.Value.IsBodyHtml)
            {
                @Html.ScriptsJs("~/Mailing/Scripts/SF_Mailing.js")
            
                <iframe id="@e.Compose("iframe")" style="width:90%">
                    @Html.Raw(body)
                </iframe>
                <script>
                    $(function () {
                        var iframe = $("@e.Compose("iframe")");
                        SF.Mailing.activateIFrame(iframe);
                    });
                </script>
            }
            else
            {
                <pre>
            @Html.Raw(HttpUtility.HtmlEncode(body))
            </pre>
            }
        </div>
            }
    }
</div>

