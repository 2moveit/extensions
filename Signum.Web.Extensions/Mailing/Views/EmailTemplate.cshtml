@using Signum.Entities.Mailing
@using (var ec = Html.TypeContext<EmailTemplateDN>())
{
    @Html.ValueLine(ec, e => e.Name)
    @Html.ValueLine(ec, e => e.State, vl => vl.ReadOnly = true)
    <fieldset>
        <legend>Properties</legend>
        @Html.EntityLine(ec, e => e.Query)
        @Html.EntityList(ec, e => e.Recipients)
        @Html.EntityLine(ec, e => e.SystemEmail)
    </fieldset>
    <fieldset>
        <legend>Active</legend>
        @Html.ValueLine(ec, e => e.Active, vl => vl.ReadOnly = true)
        @Html.ValueLine(ec, e => e.StartDate)
        @Html.ValueLine(ec, e => e.EndDate)
    </fieldset>
    <fieldset>
        <legend>From/Copies</legend>
        @Html.EntityLine(ec, e => e.From)
        @Html.EntityList(ec, e => e.Recipients)
    </fieldset>
    @Html.EntityLine(ec, e => e.SmtpConfiguration)
    <fieldset>
        <legend>Text</legend>
        @Html.EntityLine(ec, e => e.MasterTemplate)
        @Html.ValueLine(ec, e => e.IsBodyHtml)
        @Html.ValueLine(ec, e => e.EditableMessage)
        <div class="sf-tabs">
            @foreach (var message in ec.Value.Messages.OrderBy(m => m.CultureInfo))
            {
                <fieldset id="etTabMain">
                    <legend>@message.CultureInfo</legend>
                    
                </fieldset>
            }
        </div>
    </fieldset>
    @Html.EntityList(ec, e => e.Tokens)
    @Html.EntityList(ec, e => e.Messages)
}
