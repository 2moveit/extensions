@using Signum.Entities.Mailing
@using Signum.Engine.DynamicQuery
@using Signum.Engine.Basics
@using Signum.Web.Mailing

@Html.ScriptCss("~/Mailing/Content/Mailing.css")

@using (var ec = Html.TypeContext<EmailTemplateDN>())
{
    <div style="float: left">
        @Html.ValueLine(ec, e => e.Name)
        @Html.EntityCombo(ec, e => e.SystemEmail)
        @Html.EntityLine(ec, e => e.Query)
        @Html.EntityLine(ec, e => e.SmtpConfiguration)
        @Html.ValueLine(ec, e => e.EditableMessage)
        @Html.ValueLine(ec, e => e.DisableAuthorization)
    </div>
    
    if (!ec.Value.IsNew)
    {
    <fieldset style="float: left">
        <legend>Active</legend>
        @Html.ValueLine(ec, e => e.Active)
        @Html.ValueLine(ec, e => e.StartDate)
        @Html.ValueLine(ec, e => e.EndDate)
    </fieldset>
    }
    
    <div class="clearall"></div>
        
    if (ec.Value.Query != null)
    {
        object queryName = QueryLogic.ToQueryName(ec.Value.Query.Key);
        ViewData[ViewDataKeys.QueryDescription] = DynamicQueryManager.Current.QueryDescription(queryName); //To be use inside query token controls
        
        @Html.ValueLine(ec, e => e.SendDifferentMessages)
        @Html.EntityLineDetail(ec, e => e.From, el => el.PreserveViewData = true)
        @Html.EntityRepeater(ec, e => e.Recipients, el => el.PreserveViewData = true)
    
        @Html.EntityLine(ec, e => e.MasterTemplate)
        @Html.ValueLine(ec, e => e.IsBodyHtml)

        <div class="sf-email-replacements-container sf-tabs-repeater">
            @Html.EntityTabRepeater(ec, e => e.Messages, er =>
       {
           er.PreserveViewData = true;
       })
        </div>
    }
}

<script>
    $(function () {
        @(new JsLineFunction(MailingClient.Module, "initReplacements"))
    });
</script>
