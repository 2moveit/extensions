@using Signum.Entities.Mailing
@using Signum.Entities.Reflection
@Html.ScriptCss("~/Mailing/Content/Mail.css")
@using (var nc = Html.TypeContext<NewsletterDN>())
{
    bool editable = nc.Value.State == NewsletterState.Saved;
    
    <div class="@(editable ? "" : "sf-tabs")">
        @if (!editable)
        {
            <ul>
                <li><a href="#emTabMain">Newsletter</a></li>
                <li><a href="#emTabSend">Deliveries</a></li>
            </ul>
        }
        <div id="emTabMain">
            @Html.ValueLine(nc, n => n.Name)
           
            @Html.HiddenRuntimeInfo(nc, n => n.Query)
        
            @Html.ValueLine(nc, n => n.State, vl => vl.ReadOnly = true)
            @Html.ValueLine(nc, n => n.Subject)
            @if (!editable)
            {
                @Html.Hidden("htmlBodyContent", nc.Value.HtmlBody)
                <fieldset>
                    <legend>Message</legend>
                    <iframe id="newsBodyContent" name="frameNewImage" src="about:blank" class="sf-email-htmlbody" frameborder="0">
                    </iframe>
                </fieldset>
            }
            else
            {
                <div id="newsEditContent">
                    @Html.ValueLine(nc, n => n.HtmlBody, vl =>
                    {
                        vl.ValueLineType = ValueLineType.TextArea;
                        vl.ValueHtmlProps["cols"] = "30";
                        vl.ValueHtmlProps["rows"] = "6";
                        vl.ValueHtmlProps["class"] = "sf-email-htmlwrite";
                        vl.ReadOnly = !editable;
                    })
                    <br />
                    <input type="button" class="sf-button" id="newsPreviewContentButton" value="Preview content" />
                </div>
                <div id="newsPreviewContent">
                    <fieldset>
                        <legend>Message</legend>
                        <iframe id="newsBodyContentPreview" name="frameNewImage" src="about:blank" class="sf-email-htmlbody"
                            frameborder="0"></iframe>
                        <br />
                        <input type="button" class="sf-button" id="newsEditContentButton" value="Edit content" />
                    </fieldset>
                </div>
            }
            @Html.EntityCombo(nc, n => n.SMTPConfig)
            @Html.ValueLine(nc, n => n.From)
        </div>
        @if (!editable)
        {
            <div id="emTabSend">
                @Html.ValueLine(nc, n => n.NumLines)
                @Html.ValueLine(nc, n => n.NumErrors)
                <fieldset>
                    <legend>Email recipients</legend>
                    @Html.SearchControl(new FindOptions(typeof(NewsletterDeliveryDN))
               {
                   FilterOptions = { new FilterOption("Newsletter", nc.Value) { Frozen = true } },
                   SearchOnLoad = true,
               }, new Context(nc, "ncSent"))
                </fieldset>
            </div>
        }
    </div>    
}
@Html.ScriptsJs("~/Mailing/Scripts/SF_Mail.js")
