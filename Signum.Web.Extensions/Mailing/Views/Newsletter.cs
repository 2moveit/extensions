//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Ski.Entities.Newsletter;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Mailing/Views/Newsletter.cshtml")]
    public class _Page_Mailing_Views_Newsletter_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {


        public _Page_Mailing_Views_Newsletter_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {

WriteLiteral("\r\n");


 using (var nc = Html.TypeContext<NewsletterDN>())
{
    bool editable = nc.Value.State == NewsletterState.Saved;
    

WriteLiteral("    <div class=\"");


            Write(editable ? "" : "sf-tabs");

WriteLiteral("\">\r\n");


         if (!editable)
        {

WriteLiteral("            <ul>\r\n                <li><a href=\"#emTabMain\">Newsletter</a></li>\r\n " +
"               <li><a href=\"#emTabSend\">Newsletter</a></li>\r\n            </ul>\r\n" +
"");


        }

WriteLiteral("        <div id=\"emTabMain\">\r\n            ");


       Write(Html.ValueLine(nc, n => n.Name));

WriteLiteral("\r\n            ");


       Write(Html.ValueLine(nc, n => n.State, vl => vl.ReadOnly = true));

WriteLiteral("\r\n            ");


       Write(Html.ValueLine(nc, n => n.Subject));

WriteLiteral("\r\n            ");


       Write(Html.ValueLine(nc, n => n.HtmlBody, vl =>
            {
                vl.ValueLineType = ValueLineType.TextArea;
                vl.ValueHtmlProps["cols"] = "30";
                vl.ValueHtmlProps["rows"] = "6";
                vl.ReadOnly = !editable;
            }));

WriteLiteral("\r\n            ");


       Write(Html.EntityLine(nc, n => n.SMTPConfig));

WriteLiteral("\r\n            ");


       Write(Html.ValueLine(nc, n => n.From));

WriteLiteral("\r\n        </div>\r\n");


         if (!editable)
        {

WriteLiteral("            <div id=\"emTabSend\">\r\n                ");


           Write(Html.ValueLine(nc, n => n.NumLines));

WriteLiteral("\r\n                ");


           Write(Html.ValueLine(nc, n => n.NumErrors));

WriteLiteral("\r\n                <fieldset>\r\n                    <legend>Emails sent</legend>\r\n " +
"                   ");


               Write(Html.SearchControl(new FindOptions(typeof(NewsLetterSendDN))
                    {
                        FilterOptions = { new FilterOption("Newsletter", nc.Value) { Frozen = true } },
                        SearchOnLoad = true,
                    }, new Context(nc, "ncSent")));

WriteLiteral("\r\n                </fieldset>\r\n            </div>\r\n");


        }

WriteLiteral("    </div>    \r\n");


}


        }
    }
}
