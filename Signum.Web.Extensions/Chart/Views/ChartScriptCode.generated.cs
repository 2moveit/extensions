#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Signum.Web.Extensions.Chart.Views
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    
    #line 3 "..\..\Chart\Views\ChartScriptCode.cshtml"
    using Signum.Engine;
    
    #line default
    #line hidden
    using Signum.Entities;
    
    #line 1 "..\..\Chart\Views\ChartScriptCode.cshtml"
    using Signum.Entities.Chart;
    
    #line default
    #line hidden
    using Signum.Utilities;
    using Signum.Web;
    
    #line 2 "..\..\Chart\Views\ChartScriptCode.cshtml"
    using Signum.Web.Files;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.5.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Chart/Views/ChartScriptCode.cshtml")]
    public class ChartScriptCode : System.Web.Mvc.WebViewPage<TypeContext<ChartScriptDN>>
    {
        public ChartScriptCode()
        {
        }
        public override void Execute()
        {





            
            #line 5 "..\..\Chart\Views\ChartScriptCode.cshtml"
Write(Html.ScriptCss(
    "~/Content/CodeMirror/codemirror.css",
    "~/Content/CodeMirror/dialog.css",
    "~/Content/CodeMirror/simple-hint.css"));

            
            #line default
            #line hidden
WriteLiteral("\r\n");


            
            #line 9 "..\..\Chart\Views\ChartScriptCode.cshtml"
Write(Html.ScriptsJs(
        "~/Scripts/CodeMirror/codemirror.js",
        "~/Scripts/CodeMirror/javascript.js",
        "~/Scripts/CodeMirror/formatting.js",
        "~/Scripts/CodeMirror/searchcursor.js",
        "~/Scripts/CodeMirror/simple-hint.js",
        "~/Scripts/CodeMirror/javascript-hint.js",
        "~/Scripts/CodeMirror/match-highlighter.js",
        "~/Scripts/CodeMirror/search.js",
        "~/Scripts/CodeMirror/dialog.js"
        ));

            
            #line default
            #line hidden
WriteLiteral("\r\n  \r\n    <style type=\"text/css\">\r\n      .CodeMirror {\r\n        border: 1px solid" +
" #eee;\r\n      }\r\n      \r\n      \r\n      span.CodeMirror-matchhighlight \r\n      { " +
"\r\n          background: #efefef\r\n      }\r\n      .CodeMirror-focused span.CodeMir" +
"ror-matchhighlight \r\n      { \r\n          background: #efe7ff; !important \r\n     " +
" }\r\n      \r\n      .exceptionLine {background: #FFFF00 !important;}\r\n      \r\n    " +
"  .CodeMirror-fullscreen {\r\n        display: block;\r\n        position: absolute;" +
"\r\n        top: 0; left: 0;\r\n        width: 100%;\r\n        z-index: 9999;\r\n      " +
"  background: white;\r\n      }\r\n    </style>\r\n    <pre style=\"color: Green\">\r\n//v" +
"ar chart = d3.select(\'#sfChartControl .sf-chart-container\').append(\'svg:svg\').at" +
"tr(\'width\', width).attr(\'height\', height))\r\n//var data = { \r\n//              \"co" +
"lumns\": { \"c0\": { \"title\":\"Product\", \"token\":\"Product\", \"isGroupKey\":true, ... }" +
", \r\n                             \"c1\": { \"title\":\"Count\", \"token\":\"Count\", \"isGr" +
"oupKey\":true, ...} \r\n                          },\r\n//              \"rows\": [ { \"" +
"c0\": { \"key\": \"Product;1\", \"toStr\": \"Apple\", \"color\": null }, \"c1\": { \"key\": \"14" +
"0\", \"toStr\": \"140\" } },\r\n//                        { \"c0\": { \"key\": \"Product;2\"," +
" \"toStr\": \"Orange\", \"color\": null }, \"c1\": { \"key\": \"179\", \"toStr\": \"179\" } }, ." +
"..\r\n//                      ]\r\n//           }\r\n// DrawChart(chart, data);\r\n// \r\n" +
"// Visit: http://d3js.org/\r\n// Other functions defined in: \\Chart\\Scripts\\SF_Cha" +
"rt_Utils.js\r\n// use \'debugger\' keyword or just throw JSON.stringify(myVariable)\r" +
"\n// All yours!...\r\n </pre>\r\n    ");


            
            #line 64 "..\..\Chart\Views\ChartScriptCode.cshtml"
Write(Html.ValueLine(Model, c => c.Script, vl => { vl.ValueLineType = ValueLineType.TextArea; vl.LabelVisible = false; }));

            
            #line default
            #line hidden
WriteLiteral("\r\n \r\n    <script>\r\n    var $textArea = $(\"#");


            
            #line 67 "..\..\Chart\Views\ChartScriptCode.cshtml"
                    Write(Model.Compose("Script"));

            
            #line default
            #line hidden
WriteLiteral("\");\r\n    var changedDelay;\r\n   \r\n    var editor = CodeMirror.fromTextArea($textAr" +
"ea[0], {\r\n        lineNumbers: true,\r\n        matchBrackets: true,\r\n        mode" +
": \"javascript\",\r\n        extraKeys: {\r\n            \"Ctrl-Space\": \"autocomplete\"," +
"\r\n            \"Ctrl-K\": \"commentSelection\",\r\n            \"Ctrl-U\": \"uncommentSel" +
"ection\",\r\n            \"Ctrl-I\": \"autoFormatSelection\",\r\n            \"F11\": funct" +
"ion(cm) { setFullScreen(cm, !isFullScreen(cm)); },\r\n            \"Esc\": function(" +
"cm) { if (isFullScreen(cm)) setFullScreen(cm, false); } },\r\n        onCursorActi" +
"vity: function () {\r\n            editor.matchHighlight(\"CodeMirror-matchhighligh" +
"t\");\r\n        },\r\n        onChange : function(){\r\n            editor.save();\r\n  " +
"          if(opener != null && opener != undefined)\r\n            {\r\n            " +
"    clearTimeout(changedDelay);\r\n                changedDelay = setTimeout(updat" +
"ePreview, 150);\r\n            }\r\n        }\r\n    });\r\n\r\n    function updatePreview" +
"() {\r\n        opener.changeTextArea($textArea.val(), $(\"#sfRuntimeInfo\").val());" +
"\r\n        exceptionDelay = setTimeout(getException, 100);\r\n    }\r\n\r\n    var exce" +
"ptionDelay;\r\n    var hlLine;\r\n    function getException(){\r\n      var number = o" +
"pener.getExceptionNumber();\r\n      if(number != null)\r\n      {\r\n         clearTi" +
"meout(exceptionDelay);\r\n          if(hlLine != null)\r\n            editor.setLine" +
"Class(hlLine, null, null);\r\n         if(number != -1) \r\n            hlLine = edi" +
"tor.setLineClass(number -1, null, \"exceptionLine\");\r\n      }\r\n    }\r\n\r\n    CodeM" +
"irror.commands.autocomplete = function(cm) {\r\n        CodeMirror.simpleHint(cm, " +
"CodeMirror.javascriptHint);\r\n    }\r\n\r\n    function getSelectedRange() {\r\n       " +
"return { from: editor.getCursor(true), to: editor.getCursor(false) };\r\n    }\r\n\r\n" +
"    CodeMirror.commands.commentSelection = function(cm) {\r\n       var range = ge" +
"tSelectedRange();\r\n       editor.commentRange(true, range.from, range.to);\r\n    " +
"}\r\n\r\n    CodeMirror.commands.uncommentSelection = function(cm) {\r\n       var ran" +
"ge = getSelectedRange();\r\n       editor.commentRange(false, range.from, range.to" +
");\r\n    }\r\n\r\n    CodeMirror.commands.autoFormatSelection = function(cm) {\r\n     " +
"   var range = getSelectedRange();\r\n        editor.autoFormatRange(range.from, r" +
"ange.to);\r\n    }\r\n\r\n     function isFullScreen(cm) {\r\n      return /\\bCodeMirror" +
"-fullscreen\\b/.test(cm.getWrapperElement().className);\r\n    }\r\n    function winH" +
"eight() {\r\n      return window.innerHeight || (document.documentElement || docum" +
"ent.body).clientHeight;\r\n    }\r\n    function setFullScreen(cm, full) {\r\n      va" +
"r wrap = cm.getWrapperElement(), scroll = cm.getScrollerElement();\r\n      if (fu" +
"ll) {\r\n        wrap.className += \" CodeMirror-fullscreen\";\r\n        scroll.style" +
".height = winHeight() + \"px\";\r\n        document.documentElement.style.overflow =" +
" \"hidden\";\r\n      } else {\r\n        wrap.className = wrap.className.replace(\" Co" +
"deMirror-fullscreen\", \"\");\r\n        scroll.style.height = \"\";\r\n        document." +
"documentElement.style.overflow = \"\";\r\n      }\r\n      cm.refresh();\r\n    }\r\n    C" +
"odeMirror.connect(window, \"resize\", function() {\r\n      var showing = document.b" +
"ody.getElementsByClassName(\"CodeMirror-fullscreen\")[0];\r\n      if (!showing) ret" +
"urn;\r\n      showing.CodeMirror.getScrollerElement().style.height = winHeight() +" +
" \"px\";\r\n    });\r\n\r\n    </script>\r\n");


        }
    }
}
#pragma warning restore 1591
