//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Entities.Chart;
    using Signum.Web.Files;
    using Signum.Engine;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Chart/Views/ChartScriptCode.cshtml")]
    public class _Page_Chart_Views_ChartScriptCode_cshtml : System.Web.Mvc.WebViewPage<TypeContext<ChartScriptDN>>
    {


        public _Page_Chart_Views_ChartScriptCode_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {





Write(Html.ScriptCss(
    "~/Content/CodeMirror/codemirror.css",
    "~/Content/CodeMirror/dialog.css",
    "~/Content/CodeMirror/simple-hint.css"));

WriteLiteral("\r\n");


Write(Html.ScriptsJs(
        "~/Scripts/CodeMirror/codemirror.js",
        "~/Scripts/CodeMirror/javascript.js",
        "~/Scripts/CodeMirror/formatting.js",
        "~/Scripts/CodeMirror/searchcursor.js",
        "~/Scripts/CodeMirror/simple-hint.js",
        "~/Scripts/CodeMirror/javascript-hint.js",
        "~/Scripts/CodeMirror/match-highlighter.js",
        "~/Scripts/CodeMirror/search.js",
        "~/Scripts/CodeMirror/dialog.js"
        ));

WriteLiteral(@"
  
    <style type=""text/css"">
      .CodeMirror {
        border: 1px solid #eee;
      }
      .CodeMirror-scroll {
        height: auto;
        overflow-y: hidden;
        overflow-x: auto;
      }
      
      span.CodeMirror-matchhighlight 
      { 
          background: #efefef
      }
      .CodeMirror-focused span.CodeMirror-matchhighlight 
      { 
          background: #efe7ff; !important 
      }
      
      .exceptionLine {background: #FFFF00 !important;}
      
      .CodeMirror-fullscreen {
        display: block;
        position: absolute;
        top: 0; left: 0;
        width: 100%;
        z-index: 9999;
        background: white;
      }
    </style>
    <pre style=""color: Green"">
//var chart = d3.select('#sfChartControl .sf-chart-container').append('svg:svg').attr('width', width).attr('height', height))
//var data = { 
//              ""columns"": { ""c0"": { ""title"":""Product"", ""token"":""Product"", ""isGroupKey"":true}, 
                            ""c1"": { ""title"":""Count"", ""token"":""Count"", ""isGroupKey"":true} 
                          },
//              ""rows"": [ { ""c0"": { ""key"": ""Product;1"", ""toStr"": ""Apple"", ""color"": null }, ""c1"": 153 },
//                        { ""c0"": { ""key"": ""Product;2"", ""toStr"": ""Orange"", ""color"": null }, ""c1"": 179 },
//                      ]
//           }
// DrawChart(chart, data);
// All yours!...
 </pre>
    ");


Write(Html.ValueLine(Model, c => c.Script, vl => { vl.ValueLineType = ValueLineType.TextArea; vl.LabelVisible = false; }));

WriteLiteral("\r\n    <pre>}</pre>\r\n    <script>\r\n    var $textArea = $(\"#");


                    Write(Model.Compose("Script"));

WriteLiteral("\");\r\n    var changedDelay;\r\n   \r\n    var editor = CodeMirror.fromTextArea($textAr" +
"ea[0], {\r\n        lineNumbers: true,\r\n        matchBrackets: true,\r\n        mode" +
": \"javascript\",\r\n        extraKeys: {\r\n            \"Ctrl-Space\": \"autocomplete\"," +
"\r\n            \"Ctrl-K\": \"commentSelection\",\r\n            \"Ctrl-U\": \"uncommentSel" +
"ection\",\r\n            \"Ctrl-I\": \"autoFormatSelection\",\r\n            \"F11\": funct" +
"ion(cm) { setFullScreen(cm, !isFullScreen(cm)); },\r\n            \"Esc\": function(" +
"cm) { if (isFullScreen(cm)) setFullScreen(cm, false); } },\r\n        onCursorActi" +
"vity: function () {\r\n            editor.matchHighlight(\"CodeMirror-matchhighligh" +
"t\");\r\n        },\r\n        onChange : function(){\r\n            editor.save();\r\n  " +
"          if(opener != null && opener != undefined)\r\n            {\r\n            " +
"    clearTimeout(changedDelay);\r\n                changedDelay = setTimeout(updat" +
"ePreview, 150);\r\n            }\r\n        }\r\n    });\r\n\r\n    function updatePreview" +
"() {\r\n        opener.changeTextArea($textArea.val());\r\n        exceptionDelay = " +
"setTimeout(getException, 100);\r\n    }\r\n\r\n    var exceptionDelay;\r\n    var hlLine" +
";\r\n    function getException(){\r\n      var number = opener.getExceptionNumber();" +
"\r\n      if(number != null)\r\n      {\r\n         clearTimeout(exceptionDelay);\r\n   " +
"       if(hlLine != null)\r\n            editor.setLineClass(hlLine, null, null);\r" +
"\n         if(number != -1) \r\n            hlLine = editor.setLineClass(number -1," +
" null, \"exceptionLine\");\r\n      }\r\n    }\r\n\r\n    CodeMirror.commands.autocomplete" +
" = function(cm) {\r\n        CodeMirror.simpleHint(cm, CodeMirror.javascriptHint);" +
"\r\n    }\r\n\r\n    function getSelectedRange() {\r\n       return { from: editor.getCu" +
"rsor(true), to: editor.getCursor(false) };\r\n    }\r\n\r\n    CodeMirror.commands.com" +
"mentSelection = function(cm) {\r\n       var range = getSelectedRange();\r\n       e" +
"ditor.commentRange(true, range.from, range.to);\r\n    }\r\n\r\n    CodeMirror.command" +
"s.uncommentSelection = function(cm) {\r\n       var range = getSelectedRange();\r\n " +
"      editor.commentRange(false, range.from, range.to);\r\n    }\r\n\r\n    CodeMirror" +
".commands.autoFormatSelection = function(cm) {\r\n        var range = getSelectedR" +
"ange();\r\n        editor.autoFormatRange(range.from, range.to);\r\n    }\r\n\r\n     fu" +
"nction isFullScreen(cm) {\r\n      return /\\bCodeMirror-fullscreen\\b/.test(cm.getW" +
"rapperElement().className);\r\n    }\r\n    function winHeight() {\r\n      return win" +
"dow.innerHeight || (document.documentElement || document.body).clientHeight;\r\n  " +
"  }\r\n    function setFullScreen(cm, full) {\r\n      var wrap = cm.getWrapperEleme" +
"nt(), scroll = cm.getScrollerElement();\r\n      if (full) {\r\n        wrap.classNa" +
"me += \" CodeMirror-fullscreen\";\r\n        scroll.style.height = winHeight() + \"px" +
"\";\r\n        document.documentElement.style.overflow = \"hidden\";\r\n      } else {\r" +
"\n        wrap.className = wrap.className.replace(\" CodeMirror-fullscreen\", \"\");\r" +
"\n        scroll.style.height = \"\";\r\n        document.documentElement.style.overf" +
"low = \"\";\r\n      }\r\n      cm.refresh();\r\n    }\r\n    CodeMirror.connect(window, \"" +
"resize\", function() {\r\n      var showing = document.body.getElementsByClassName(" +
"\"CodeMirror-fullscreen\")[0];\r\n      if (!showing) return;\r\n      showing.CodeMir" +
"ror.getScrollerElement().style.height = winHeight() + \"px\";\r\n    });\r\n\r\n    </sc" +
"ript>\r\n");


        }
    }
}
