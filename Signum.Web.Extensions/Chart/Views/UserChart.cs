//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Web.Extensions.Properties;
    using Signum.Entities.DynamicQuery;
    using Signum.Engine.DynamicQuery;
    using Signum.Entities.Reflection;
    using Signum.Entities.Chart;
    using Signum.Web.Chart;
    using Signum.Engine.Basics;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Chart/Views/UserChart.cshtml")]
    public class _Page_Chart_Views_UserChart_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {


        public _Page_Chart_Views_UserChart_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {










WriteLiteral("\r\n");


Write(Html.ScriptsJs("~/Chart/Scripts/SF_Chart.js"));

WriteLiteral("\r\n");


Write(Html.ScriptCss("~/Chart/Content/SF_Chart.css"));

WriteLiteral(@"

<style type=""text/css"">
.sf-chart-control .sf-repeater-element
{
    padding: 2px 10px;
}
.sf-chart-control .sf-repeater-element legend
{
    float: left;
    margin-right: 10px;
}
</style>

<div class=""sf-chart-control"" 
    data-subtokens-url=""");


                   Write(Url.Action("NewSubTokensCombo", "Chart"));

WriteLiteral("\" \r\n    data-add-filter-url=\"");


                    Write(Url.Action("AddFilter", "Chart"));

WriteLiteral("\" \r\n    data-prefix=\"");


            Write(Model.ControlID);

WriteLiteral("\">\r\n\r\n");


     using (var uc = Html.TypeContext<UserChartDN>())
    {
        object queryName = QueryLogic.ToQueryName(uc.Value.Query.Key);
        ViewData[ViewDataKeys.QueryName] = queryName; //To be use inside Repeaters
        
   Write(Html.Hidden("webQueryName", Navigator.ResolveWebQueryName(queryName)));

                                                                              

        using (var query = uc.SubContext(tc => tc.Query))
        {
            
       Write(Html.HiddenRuntimeInfo(query));

                                          
        
            
       Write(Html.Hidden(query.Compose("Key"), query.Value.Key));

                                                               
            
       Write(Html.Hidden(query.Compose("DisplayName"), query.Value.Name));

                                                                               

            
       Write(Html.Field("Query", Navigator.IsFindable(queryName) ?
                new HtmlTag("a").Class("sf-value-line").Attr("href", Navigator.FindRoute(queryName)).InnerHtml(query.Value.Name.EncodeHtml()).ToHtml() :
                Html.Span("spanQuery", query.Value.Name, "sf-value-line")));

                                                                                 


WriteLiteral("            <div class=\"clearall\"></div>\r\n");


        }
    
        
   Write(Html.EntityLine(uc, tc => tc.Related, el => el.Create = false));

                                                                       
        
   Write(Html.ValueLine(uc, tc => tc.DisplayName));

                                                 

        
   Write(Html.EntityRepeater(uc, tc => tc.Filters, er => { er.PreserveViewData = true; er.PartialViewName = "~/Chart/Views/UserChartFilter.cshtml"; }));

                                                                                                                                                      

        
   Write(Html.EntityRepeater(uc, tc => tc.Orders, er => { er.PreserveViewData = true; er.PartialViewName = "~/Chart/Views/UserChartOrder.cshtml"; }));

                                                                                                                                                    

        using (var chart = uc.SubContext(tc => tc.Chart))
        {

WriteLiteral("            <div id=\"");


                Write(uc.Compose("sfChartBuilderContainer"));

WriteLiteral("\">\r\n                ");


           Write(Html.HiddenRuntimeInfo(chart));

WriteLiteral("\r\n                ");


           Write(Html.Partial(ChartClient.ChartBuilderView, chart));

WriteLiteral("\r\n            </div>\r\n");



WriteLiteral("            <script type=\"text/javascript\">\r\n                $(\'#");


               Write(uc.Compose("sfChartBuilderContainer"));

WriteLiteral("\').chartBuilder($.extend({ prefix: \'");


                                                                                         Write(uc.ControlID);

WriteLiteral("\' }, ");


                                                                                                           Write(MvcHtmlString.Create(uc.Value.ToJS()));

WriteLiteral("));\r\n            </script>\r\n");


        }
    }

WriteLiteral("</div>\r\n");


        }
    }
}
