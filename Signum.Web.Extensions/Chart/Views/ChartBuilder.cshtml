@using Signum.Web
@using Signum.Web.Extensions.Properties
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Signum.Entities
@using Signum.Entities.Chart
@using Signum.Web.Chart
@using Signum.Utilities

@using (var chart = Html.TypeContext<ChartBase>())
{
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    if (queryDescription == null)
    {
        queryDescription = DynamicQueryManager.Current.QueryDescription(((UserChartDN)((TypeContext)chart.Parent).UntypedValue).QueryName);
    }

    <table id="@chart.Compose("sfChartBuilder")" class="sf-chart-builder" data-url="@(Url.Action<ChartController>(cc => cc.UpdateChartBuilder(chart.Parent.ControlID)))">
        <tr>
            <td class="ui-widget ui-widget-content ui-corner-all sf-chart-type">
                <div class="ui-widget-header">
                    @typeof(ChartType).NiceName()
                    @Html.Hidden(chart.Compose("ChartType"), chart.Value.ChartType.ToString(), new { @class = "sf-chart-type-value" })
                    @Html.Hidden(chart.Compose("GroupResults"), chart.Value.GroupResults, new { @class = "sf-chart-group-results" })
                </div>
                @foreach (var group in ChartUtils.ChartTypePosition.GroupBy(ctp => ctp.Row).OrderBy(group => group.Key))
                {
                    foreach (var type in group.OrderBy(ctp => ctp.Column))
                    { 
                        <div class="@ChartClient.ChartTypeImgClass(chart.Value, type.ChartType)" data-related="@type.ChartType.ToString()" title="@type.ChartType.NiceToString()"></div>
                    }
                    <div class="clearall"></div>
                }
            </td>
            <td class="ui-widget ui-widget-content ui-corner-all sf-chart-tokens">
                <div class="ui-widget-header">@Resources.Chart_ChartSettings</div>
                <table>
                    <tr>
                        <th class="sf-chart-token-narrow">@Resources.Chart_Dimension</th>
                        <th class="sf-chart-token-narrow">@Resources.Chart_Group</th>
                        <th class="sf-chart-token-wide">Token</th>
                    </tr>
                    @{
                        if (chart.Value.Dimension1 != null)
                        {
                                @Html.HiddenRuntimeInfo(chart, cr => cr.Dimension1)
                                @Html.EmbeddedControl(chart, cr => cr.Dimension1, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName)
                        }
                        if (chart.Value.Dimension2 != null)
                        {
                                @Html.HiddenRuntimeInfo(chart, cr => cr.Dimension2)
                                @Html.EmbeddedControl(chart, cr => cr.Dimension2, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName)
                        }
                        if (chart.Value.Value1 != null)
                        {
                                @Html.HiddenRuntimeInfo(chart, cr => cr.Value1)
                                @Html.EmbeddedControl(chart, cr => cr.Value1, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName)
                        }
                        if (chart.Value.Value2 != null)
                        {
                                @Html.HiddenRuntimeInfo(chart, cr => cr.Value2)
                                @Html.EmbeddedControl(chart, cr => cr.Value2, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName)
                        }
                    }
                </table>
            </td>
        </tr>
    </table>
}