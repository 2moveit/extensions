//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Web.Extensions.Properties;
    using Signum.Entities.DynamicQuery;
    using Signum.Engine.DynamicQuery;
    using Signum.Entities.Reflection;
    using Signum.Entities.Chart;
    using Signum.Web.Chart;
    using Signum.Engine;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Chart/Views/ChartPalette.cshtml")]
    public class _Page_Chart_Views_ChartPalette_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {


        public _Page_Chart_Views_ChartPalette_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {












Write(Html.ScriptCss("~/Chart/Content/SF_Chart.css"));

WriteLiteral("\r\n\r\n");


 using (var cpt = Html.TypeContext<ChartPaletteModel>())
{
    
Write(Html.HiddenRuntimeInfo(cpt, cp => cp.Type));

                                               

WriteLiteral(@"    <table class=""sf-search-results sf-chart-color-table"">
        <thead>
            <tr>
                <th class=""ui-state-default"">
                    Color
                </th>
                <th class=""ui-state-default"">
                    Hex
                </th>
                <th class=""ui-state-default"">
                    Id
                </th>
                <th class=""ui-state-default"">
                    Text
                </th>
            </tr>
        </thead>
        <tbody>
");


             foreach (TypeContext<ChartColorDN> clc in cpt.TypeElementContext(cp => cp.Colors))
            {  

WriteLiteral("                <tr>\r\n                    <td>\r\n                        <div clas" +
"s=\"sf-chart-color-box\">\r\n                        </div>\r\n                    </t" +
"d>\r\n                    <td>\r\n                        #");


                    Write(Html.TextBox(clc.Compose("Color_Rgb"), clc.Value.Color.TryCC(c => c.ToColor().ToHtml().Substring(1)), new { maxlength = 6, size = 6, @class = "sf-chart-color-input" }));

WriteLiteral("\r\n                        ");


                   Write(Html.HiddenRuntimeInfo(clc, cl => cl.Related));

WriteLiteral("\r\n                    </td>\r\n                    <td>\r\n                        ");


                   Write(clc.Value.Related.Id);

WriteLiteral("\r\n                    </td>\r\n                    <td>\r\n                        ");


                   Write(clc.Value.Related.ToString());

WriteLiteral("\r\n                    </td>\r\n                </tr>\r\n");


            }

WriteLiteral("        </tbody>\r\n    </table>\r\n");


}

WriteLiteral(@"<script type=""text/javascript"">
    var SF = SF || {};

    SF.ChartColors = (function () {
        var updateColor = function (input) {
            var $input = $(input);
            $input.closest(""tr"").find(""div.sf-chart-color-box"").css(""background-color"", ""#"" + ($input.val() || ""FFFFFF""));
        }

        $(function () {
            $(""input.sf-chart-color-input"")
                .each(function (i, input) { updateColor(input); })
                .change(function () { updateColor(this); });

            $(""#sfChartSavePalette"").on(""click"", function (e) {
                e.preventDefault();

            });
        });

        var savePalette = function (url) {
            $.ajax({
                url: url,
                data: $(""#divMainControl :input"").serialize(),
                success: function (result) {
                    if (typeof result.ModelState != ""undefined"") {
                        new SF.Validator().showErrors(result.ModelState);
                    }
                }
            });
        };

        return {
            savePalette: savePalette
        };
    })();
</script>
");


        }
    }
}
