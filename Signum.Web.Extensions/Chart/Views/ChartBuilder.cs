//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using Signum.Web.Extensions.Properties;
    using Signum.Entities.DynamicQuery;
    using Signum.Engine.DynamicQuery;
    using Signum.Entities.Reflection;
    using Signum.Entities.Chart;
    using Signum.Web.Chart;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Chart/Views/ChartBuilder.cshtml")]
    public class _Page_Chart_Views_ChartBuilder_cshtml : System.Web.Mvc.WebViewPage<TypeContext<ChartRequest>>
    {


        public _Page_Chart_Views_ChartBuilder_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {











WriteLiteral("\r\n");


   QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription]; 

WriteLiteral("\r\n<table class=\"sf-chart-builder\">\r\n    <tr>\r\n        <td class=\"ui-widget ui-wid" +
"get-content ui-corner-all sf-chart-type\" data-url=\"");


                                                                                  Write(Url.Action<ChartController>(cc => cc.ChangeType(Model.ControlID)));

WriteLiteral("\">\r\n            <div class=\"ui-widget-header\">\r\n                ");


           Write(typeof(ChartType).NiceName());

WriteLiteral("\r\n                ");


           Write(Html.Hidden(Model.Compose("Chart", "ChartType"), Model.Value.Chart.ChartType.ToString()));

WriteLiteral("\r\n            </div>\r\n");


             foreach(var group in ChartUtils.ChartTypePosition.GroupBy(ctp => ctp.Row).OrderBy(group => group.Key))
            {
                foreach (var type in group.OrderBy(ctp => ctp.Column))
                { 

WriteLiteral("                    <div class=\"");


                           Write(ChartClient.ChartTypeImgClass(Model.Value.Chart, type.ChartType));

WriteLiteral("\" data-related=\"");


                                                                                                            Write(type.ChartType.ToString());

WriteLiteral("\" title=\"");


                                                                                                                                               Write(type.ChartType.NiceToString());

WriteLiteral("\"></div>\r\n");


                }

WriteLiteral("                <div class=\"clearall\"></div>\r\n");


            }

WriteLiteral("        </td>\r\n        <td class=\"ui-widget ui-widget-content ui-corner-all sf-ch" +
"art-tokens\">\r\n            <div class=\"ui-widget-header\">");


                                     Write(Resources.Chart_ChartSettings);

WriteLiteral("</div>\r\n");


              
                if (Model.Value.Chart.FirstDimension != null)
                {
                    
               Write(Html.HiddenRuntimeInfo(Model, cr => cr.Chart.FirstDimension));

                                                                                 
                    
               Write(Html.EmbeddedControl(Model, cr => cr.Chart.FirstDimension, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName));

                                                                                                                                                       
                }
                if (Model.Value.Chart.SecondDimension != null)
                {
                    
               Write(Html.HiddenRuntimeInfo(Model, cr => cr.Chart.SecondDimension));

                                                                                  
                    
               Write(Html.EmbeddedControl(Model, cr => cr.Chart.SecondDimension, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName));

                                                                                                                                                        
                }
                if (Model.Value.Chart.FirstValue != null)
                {
                    
               Write(Html.HiddenRuntimeInfo(Model, cr => cr.Chart.FirstValue));

                                                                             
                    
               Write(Html.EmbeddedControl(Model, cr => cr.Chart.FirstValue, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName));

                                                                                                                                                   
                }
                if (Model.Value.Chart.SecondValue != null)
                {
                    
               Write(Html.HiddenRuntimeInfo(Model, cr => cr.Chart.SecondValue));

                                                                              
                    
               Write(Html.EmbeddedControl(Model, cr => cr.Chart.SecondValue, ec => ec.ViewData[ViewDataKeys.QueryName] = queryDescription.QueryName));

                                                                                                                                                    
                }
            

WriteLiteral("        </td>\r\n    </tr>\r\n</table>");


        }
    }
}
