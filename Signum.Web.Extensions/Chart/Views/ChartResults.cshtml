@using Signum.Entities.DynamicQuery
@using Signum.Entities.Reflection
@using Signum.Engine
@using System.Web.Mvc
@using Signum.Entities
@using Signum.Web
@using Signum.Entities.Chart
@using Signum.Web.Chart
@model TypeContext<ChartRequest>
@{ 
    ResultTable queryResult = (ResultTable)ViewData[ViewDataKeys.Results];
    bool navigate = (bool)ViewData[ViewDataKeys.Navigate];
    var formatters = (Dictionary<int, CellFormatter>)ViewData[ViewDataKeys.Formatters];
}
@if (queryResult == null)
{ 
    @JavascriptMessage.Signum_noResults.NiceToString()
}
else
{
    <div class="sf-tabs">
        <fieldset id="@Model.Compose("sfChartContainer")">
            <legend>Chart</legend>
            <div class="sf-chart-container" 
            data-open-url="@(Url.Action<ChartController>(cc => cc.OpenSubgroup(Model.ControlID)))"
            data-json="@Html.Json(ChartUtils.DataJson(Model.Value, queryResult)).ToString()">
            </div>
        </fieldset>
        <fieldset id="@Model.Compose("sfChartData")" >
            <legend>Data</legend>
            @Html.Partial(ChartClient.ChartResultsTableView, Model, ViewData)
        </fieldset>
    </div>
}
