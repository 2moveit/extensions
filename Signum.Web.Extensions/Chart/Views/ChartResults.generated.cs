#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Signum.Web.Extensions.Chart.Views
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Text;
    using System.Web;
    using System.Web.Helpers;
    
    #line 5 "..\..\Chart\Views\ChartResults.cshtml"
    using System.Web.Mvc;
    
    #line default
    #line hidden
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    
    #line 4 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Engine;
    
    #line default
    #line hidden
    
    #line 6 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Entities;
    
    #line default
    #line hidden
    
    #line 8 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Entities.Chart;
    
    #line default
    #line hidden
    
    #line 1 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Entities.DynamicQuery;
    
    #line default
    #line hidden
    
    #line 2 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Entities.Reflection;
    
    #line default
    #line hidden
    using Signum.Utilities;
    
    #line 7 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Web;
    
    #line default
    #line hidden
    
    #line 9 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Web.Chart;
    
    #line default
    #line hidden
    
    #line 3 "..\..\Chart\Views\ChartResults.cshtml"
    using Signum.Web.Properties;
    
    #line default
    #line hidden
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("RazorGenerator", "1.5.0.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Chart/Views/ChartResults.cshtml")]
    public class ChartResults : System.Web.Mvc.WebViewPage<TypeContext<ChartRequest>>
    {
        public ChartResults()
        {
        }
        public override void Execute()
        {











            
            #line 11 "..\..\Chart\Views\ChartResults.cshtml"
   
    ResultTable queryResult = (ResultTable)ViewData[ViewDataKeys.Results];
    bool navigate = (bool)ViewData[ViewDataKeys.Navigate];
    var formatters = (Dictionary<int, CellFormatter>)ViewData[ViewDataKeys.Formatters];


            
            #line default
            #line hidden

            
            #line 16 "..\..\Chart\Views\ChartResults.cshtml"
 if (queryResult == null)
{ 
    
            
            #line default
            #line hidden
            
            #line 18 "..\..\Chart\Views\ChartResults.cshtml"
Write(Resources.Signum_noResults);

            
            #line default
            #line hidden
            
            #line 18 "..\..\Chart\Views\ChartResults.cshtml"
                               
}
else
{

            
            #line default
            #line hidden
WriteLiteral("    <div class=\"sf-tabs\">\r\n        <fieldset id=\"");


            
            #line 23 "..\..\Chart\Views\ChartResults.cshtml"
                 Write(Model.Compose("sfChartContainer"));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n            <legend>Chart</legend>\r\n            <div class=\"sf-chart-containe" +
"r\" \r\n            data-open-url=\"");


            
            #line 26 "..\..\Chart\Views\ChartResults.cshtml"
                       Write(Url.Action<ChartController>(cc => cc.OpenSubgroup(Model.ControlID)));

            
            #line default
            #line hidden
WriteLiteral("\"\r\n            data-json=\"");


            
            #line 27 "..\..\Chart\Views\ChartResults.cshtml"
                  Write(Html.Json(ChartUtils.DataJson(Model.Value, queryResult)).ToString());

            
            #line default
            #line hidden
WriteLiteral("\">\r\n            </div>\r\n        </fieldset>\r\n        <fieldset id=\"");


            
            #line 30 "..\..\Chart\Views\ChartResults.cshtml"
                 Write(Model.Compose("sfChartData"));

            
            #line default
            #line hidden
WriteLiteral("\" >\r\n            <legend>Data</legend>\r\n            <table id=\"");


            
            #line 32 "..\..\Chart\Views\ChartResults.cshtml"
                  Write(Model.Compose("tblResults"));

            
            #line default
            #line hidden
WriteLiteral("\" class=\"sf-search-results\">\r\n                <thead class=\"ui-widget-header ui-c" +
"orner-top\">\r\n                    <tr>\r\n");


            
            #line 35 "..\..\Chart\Views\ChartResults.cshtml"
                         if (!Model.Value.GroupResults && navigate)
                        {

            
            #line default
            #line hidden
WriteLiteral("                            <th class=\"ui-state-default sf-th-entity\">\r\n         " +
"                   </th>\r\n");


            
            #line 39 "..\..\Chart\Views\ChartResults.cshtml"
                        }

            
            #line default
            #line hidden

            
            #line 40 "..\..\Chart\Views\ChartResults.cshtml"
                         if (queryResult.Columns.Any())
                        {
                            foreach (ResultColumn col in queryResult.Columns)
                            {
                                var order = Model.Value.Orders.FirstOrDefault(oo => oo.Token.FullKey() == col.Column.Name);
                                OrderType? orderType = null;
                                if (order != null)
                                {
                                    orderType = order.OrderType;
                                }

            
            #line default
            #line hidden
WriteLiteral("                            <th class=\"ui-state-default ");


            
            #line 50 "..\..\Chart\Views\ChartResults.cshtml"
                                                    Write((orderType == null) ? "" : (orderType == OrderType.Ascending ? "sf-header-sort-down" : "sf-header-sort-up"));

            
            #line default
            #line hidden
WriteLiteral("\">\r\n                                <input type=\"hidden\" value=\"");


            
            #line 51 "..\..\Chart\Views\ChartResults.cshtml"
                                                       Write(col.Column.Name);

            
            #line default
            #line hidden
WriteLiteral("\" />\r\n                                ");


            
            #line 52 "..\..\Chart\Views\ChartResults.cshtml"
                           Write(col.Column.DisplayName);

            
            #line default
            #line hidden
WriteLiteral("\r\n                            </th>\r\n");


            
            #line 54 "..\..\Chart\Views\ChartResults.cshtml"
                            }
                        }

            
            #line default
            #line hidden
WriteLiteral("                    </tr>\r\n                </thead>\r\n                <tbody class" +
"=\"ui-widget-content\">\r\n");


            
            #line 59 "..\..\Chart\Views\ChartResults.cshtml"
                     if (!queryResult.Rows.Any())
                    {

            
            #line default
            #line hidden
WriteLiteral("                        <tr>\r\n                            <td colspan=\"");


            
            #line 62 "..\..\Chart\Views\ChartResults.cshtml"
                                     Write(queryResult.Columns.Count() + (navigate ? 1 : 0));

            
            #line default
            #line hidden
WriteLiteral("\">");


            
            #line 62 "..\..\Chart\Views\ChartResults.cshtml"
                                                                                         Write(Resources.Signum_noResults);

            
            #line default
            #line hidden
WriteLiteral("\r\n                            </td>\r\n                        </tr>\r\n");


            
            #line 65 "..\..\Chart\Views\ChartResults.cshtml"
                    }
                    else
                    {
                        foreach (var row in queryResult.Rows)
                        {
                            if (Model.Value.GroupResults)
                            {

            
            #line default
            #line hidden
WriteLiteral("                        <tr>\r\n");


            
            #line 73 "..\..\Chart\Views\ChartResults.cshtml"
                             foreach (var col in queryResult.Columns)
                            {
                                CellFormatter ft = formatters[col.Index];
                                var value = row[col];

            
            #line default
            #line hidden
WriteLiteral("                                 <td ");


            
            #line 77 "..\..\Chart\Views\ChartResults.cshtml"
                                Write(ft.WriteDataAttribute(value));

            
            #line default
            #line hidden
WriteLiteral(">\r\n                                    ");


            
            #line 78 "..\..\Chart\Views\ChartResults.cshtml"
                               Write(ft.Formatter(Html, value));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                </td>\r\n");


            
            #line 80 "..\..\Chart\Views\ChartResults.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                        </tr>\r\n");


            
            #line 82 "..\..\Chart\Views\ChartResults.cshtml"
                            }
                            else
                            {
                                Lite entityField = row.Entity;

            
            #line default
            #line hidden
WriteLiteral("                        <tr data-entity=\"");


            
            #line 86 "..\..\Chart\Views\ChartResults.cshtml"
                                    Write(entityField.Key());

            
            #line default
            #line hidden
WriteLiteral("\">\r\n");


            
            #line 87 "..\..\Chart\Views\ChartResults.cshtml"
                             if (entityField != null && navigate)
                            {

            
            #line default
            #line hidden
WriteLiteral("                                <td>\r\n                                    ");


            
            #line 90 "..\..\Chart\Views\ChartResults.cshtml"
                               Write(QuerySettings.EntityFormatRules.Last(fr => fr.IsApplyable(entityField)).Formatter(Html, entityField));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                </td>\r\n");


            
            #line 92 "..\..\Chart\Views\ChartResults.cshtml"
                            }

            
            #line default
            #line hidden

            
            #line 93 "..\..\Chart\Views\ChartResults.cshtml"
                             foreach (var col in queryResult.Columns)
                            {
                                var value = row[col];
                                var ft = formatters[col.Index];

            
            #line default
            #line hidden
WriteLiteral("                                <td ");


            
            #line 97 "..\..\Chart\Views\ChartResults.cshtml"
                               Write(ft.WriteDataAttribute(value));

            
            #line default
            #line hidden
WriteLiteral(">\r\n                                    ");


            
            #line 98 "..\..\Chart\Views\ChartResults.cshtml"
                               Write(ft.Formatter(Html, value));

            
            #line default
            #line hidden
WriteLiteral("\r\n                                </td>\r\n");


            
            #line 100 "..\..\Chart\Views\ChartResults.cshtml"
                            }

            
            #line default
            #line hidden
WriteLiteral("                        </tr>\r\n");


            
            #line 102 "..\..\Chart\Views\ChartResults.cshtml"
                            }
                        }
                    }

            
            #line default
            #line hidden
WriteLiteral("                </tbody>\r\n                <tfoot>\r\n                </tfoot>\r\n    " +
"        </table>\r\n        </fieldset>\r\n    </div>\r\n");


            
            #line 111 "..\..\Chart\Views\ChartResults.cshtml"
}

            
            #line default
            #line hidden

        }
    }
}
#pragma warning restore 1591
