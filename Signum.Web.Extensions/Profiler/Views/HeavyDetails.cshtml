@using Signum.Utilities.ExpressionTrees
@using Signum.Web.Profiler

@{ HeavyProfilerEntry entry = (HeavyProfilerEntry)Model;}
<h2>
    Profiler Entry (
    @foreach (var e in entry.FollowC(a => a.Parent).Skip(1).Reverse())
    {@Html.ProfilerEntry(e.Index.ToString(), e.FullIndex())@:.
    }
    @entry.Index.ToString())</h2>
@Html.ActionLink("(View all)",(ProfilerController  pc)=>pc.Heavy())
<table class="sf-search-results">
    <tr>
        <th>
            Method
        </th>
        <td>
            @(entry.Type.TryCC(t => t.TypeName())).@entry.Method.Name
        </td>
    </tr>
    <tr>
        <th>
            File Line
        </th>
        <td>
            @entry.StackTrace.GetFrame(0).GetFileLineAndNumber()
        </td>
    </tr>
    <tr>
        <th>
            Role
        </th>
        <td>
            @entry.Role
        </td>
    </tr>
    <tr>
        <th>
            Time
        </th>
        <td>
            @entry.Elapsed.NiceToString()
        </td>
    </tr>
    <tr>
        <th>
            Direct Childs
        </th>
        <td>
            @entry.GetEntriesResume().TryToString()
        </td>
    </tr>
    @foreach (var kvp in entry.GetDescendantRoles())
    { 
        <tr>
            <th>
                @kvp.Key Childs
            </th>
            <td>
                @kvp.Value.ToString(entry)
            </td>
        </tr>
    }
</table>
<br />
@if (entry.Entries != null)
{
    <h3>
        Childs</h3>
    Html.RenderPartial(ProfilerClient.ViewPrefix.Formato("ProfilerTable"), entry.Entries);
}
<h3>
    Aditional Data</h3>

    <div>
    
    </div>
<div>
    <pre>
    <code>
        @entry.AditionalData
    </code>
    </pre>
</div>
<br />
<h3>
    StackTrace</h3>
<table class="sf-search-results">
    <thead>
        <tr>
            <th>
                Type
            </th>
            <th>
                Method
            </th>
            <th>
                FileLine
            </th>
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < entry.StackTrace.FrameCount; i++)
        {
            var frame = entry.StackTrace.GetFrame(i);
            var type = frame.GetMethod().DeclaringType;
            <tr>
                <td>
                @if (type != null)
                {
                    var color = Signum.Utilities.DataStructures.ColorGenerator.ColorFor(type.Assembly.FullName.GetHashCode());
                    
                    <span style="color:@color">@frame.GetMethod().DeclaringType.TryCC(t => t.TypeName())</span>
                }
                </td>
                <td>
                    @frame.GetMethod().Name
                </td>
                <td>
                    @frame.GetFileLineAndNumber()
                </td>
            </tr>
        }
    </tbody>
</table>
<br />
