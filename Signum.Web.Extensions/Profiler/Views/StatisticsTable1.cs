//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Utilities.ExpressionTrees;
    using Signum.Web.Profiler;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Profiler/Views/StatisticsTable.cshtml")]
    public class _Page_Profiler_Views_StatisticsTable_cshtml : System.Web.Mvc.WebViewPage<IOrderedEnumerable<SqlProfileResume>>
    {


        public _Page_Profiler_Views_StatisticsTable_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {




             
    SqlProfileResumeOrder order = ViewBag.Order;


WriteLiteral("<table class=\"sf-search-results sf-stats-table\">\r\n    <thead>\r\n        <tr class=" +
"\"ui-state-default\">\r\n            <th>\r\n                Query\r\n            </th>\r" +
"\n            <th class=\"");


                   Write(order == SqlProfileResumeOrder.Count ? "sf-header-sort-up" : "");

WriteLiteral("\">\r\n                ");


           Write(Html.ActionLink("Count", (ProfilerController pc) => pc.Statistics(SqlProfileResumeOrder.Count)));

WriteLiteral("\r\n            </th>\r\n            <th class=\"");


                   Write(order == SqlProfileResumeOrder.Sum ? "sf-header-sort-up" : "");

WriteLiteral("\">\r\n                ");


           Write(Html.ActionLink("Sum", (ProfilerController pc) => pc.Statistics(SqlProfileResumeOrder.Sum)));

WriteLiteral("\r\n            </th>\r\n            <th class=\"");


                   Write(order == SqlProfileResumeOrder.Avg ? "sf-header-sort-up" : "");

WriteLiteral("\">\r\n                ");


           Write(Html.ActionLink("Avg", (ProfilerController pc) => pc.Statistics(SqlProfileResumeOrder.Avg)));

WriteLiteral("\r\n            </th>\r\n            <th class=\"");


                   Write(order == SqlProfileResumeOrder.Min ? "sf-header-sort-up" : "");

WriteLiteral("\">\r\n                ");


           Write(Html.ActionLink("Min", (ProfilerController pc) => pc.Statistics(SqlProfileResumeOrder.Min)));

WriteLiteral("\r\n            </th>\r\n            <th class=\"");


                   Write(order == SqlProfileResumeOrder.Max ? "sf-header-sort-up" : "");

WriteLiteral("\">\r\n                ");


           Write(Html.ActionLink("Max", (ProfilerController pc) => pc.Statistics(SqlProfileResumeOrder.Max)));

WriteLiteral("\r\n            </th>\r\n            <th>\r\n               References\r\n            </t" +
"h>\r\n        </tr>\r\n    </thead>\r\n    <tbody>\r\n");


         foreach (var item in Model)
        {

WriteLiteral("            <tr>\r\n                <td><a class=\"sf-stats-show\">Show</a></td>\r\n   " +
"             <td>");


               Write(item.Count);

WriteLiteral("</td>\r\n                <td>");


               Write(item.Sum.NiceToString());

WriteLiteral("</td>\r\n                <td>");


               Write(item.Avg.NiceToString());

WriteLiteral("</td>\r\n                <td>");


               Write(item.Min.NiceToString());

WriteLiteral("</td>\r\n                <td>");


               Write(item.Max.NiceToString());

WriteLiteral("</td>\r\n                <td>\r\n");


                    foreach (var r in item.References.Iterate())
                   {
                       
                  Write(Html.ActionLink(r.Value.FullKey + " " + r.Value.Elapsed.NiceToString().Trim(), (ProfilerController pc) => pc.HeavyRoute(r.Value.FullKey)));

                                                                                                                                                                 
                       if (!r.IsLast)
                       {

WriteLiteral("                           ");

WriteLiteral("|");

WriteLiteral(" \r\n");


                       }
                   }

WriteLiteral("                </td>  \r\n            </tr>\r\n");



WriteLiteral("            <tr style=\"display:none\">\r\n            <td colspan=\"7\">\r\n            " +
"<pre style=\"width:1500px\" >");


                                  Write(item.Query);

WriteLiteral("</pre>\r\n            </td>\r\n            </tr>\r\n");


        }

WriteLiteral("        \r\n    </tbody>\r\n</table>");


        }
    }
}
