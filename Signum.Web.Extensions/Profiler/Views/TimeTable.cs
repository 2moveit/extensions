//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Profiler/Views/TimeTable.cshtml")]
    public class _Page_Profiler_Views_TimeTable_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {


        public _Page_Profiler_Views_TimeTable_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {


    
    ViewBag.Title = "Table Times";


WriteLiteral("<script type=\"text/javascript\">\r\n    $(function () {\r\n        $(\".sf-search-resul" +
"ts\").tablesorter();\r\n    });\r\n</script>\r\n\r\n");


Write(Html.ActionLink("Clear", "ClearTimesTable"));

WriteLiteral(@"

<table class=""sf-search-results"">
    <thead>
        <tr>
            <th>Name</th>
            <th>Entity</th>
            <th>Executions</th>
            <th>Last Time</th>
            <th>Min</th>
            <th>Average</th>
            <th>Max</th>
            <th>total</th>
        </tr>
    </thead>
");


    double[] percentiles = new double[] { 0, 0.2, 0.8 };


  if (TimeTracker.IdentifiedElapseds.Count > 0)
 {
     double max = TimeTracker.IdentifiedElapseds.OrderByDescending(p => p.Value.Average).FirstEx().Value.Average;
     foreach (KeyValuePair<string, TimeTrackerEntry> pair in TimeTracker.IdentifiedElapseds.OrderByDescending(p => p.Value.Average))
     {
         double percentile = pair.Value.Average / (double)max;
         int percentileIndex = 0;
         int i = 0;
         bool salir = false;
         while (i < percentiles.Length && !salir)
         {
             if (percentile > percentiles[i]) { percentileIndex = i; }
             if (percentile < percentiles[i]) { salir = true; }
             i++;
         }

WriteLiteral("    <tbody>\r\n        <tr class=\"percentile@percentileIndex\">\r\n            <td><sp" +
"an class=\"processName\">");


                                     Write(pair.Key.Split(' ')[0]);


                                                                 WriteLiteral("</span></td>\r\n            <td>");

                 if (pair.Key.Split(' ').Length > 1)
                {
WriteLiteral("<span class=\"entityName\">");


                                     Write(pair.Key.Split(' ')[1]);

WriteLiteral("</span>");


                                                                        }
WriteLiteral("</td>\r\n            <td class=\"centered\">");


                            Write(pair.Value.Count);

WriteLiteral("</td>\r\n            <td class=\"right\">");


                         Write(pair.Value.LastTime);

WriteLiteral("</td>\r\n            <td class=\"right\">");


                         Write(pair.Value.MinTime);

WriteLiteral("</td>\r\n            <td class=\"right\">");


                         Write(pair.Value.Average);

WriteLiteral("</td>\r\n            <td class=\"right\">");


                         Write(pair.Value.MaxTime);

WriteLiteral("</td>\r\n            <td class=\"right\">");


                         Write(pair.Value.TotalTime);

WriteLiteral("</td>            \r\n        </tr>\r\n    </tbody>\r\n");


    }
 }

WriteLiteral("</table>\r\n");


        }
    }
}
