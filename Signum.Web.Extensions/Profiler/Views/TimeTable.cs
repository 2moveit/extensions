//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using System.Drawing;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Profiler/Views/TimeTable.cshtml")]
    public class _Page_Profiler_Views_TimeTable_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {


        public _Page_Profiler_Views_TimeTable_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {



    
    ViewBag.Title = "Table Times";



Write(Html.ActionLink("Clear", "ClearTimesTable"));

WriteLiteral(@"
<table class=""sf-search-results"">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Entity
            </th>
            <th>
                Executions
            </th>
            <th>
                Last Time
            </th>
            <th>
                Min
            </th>
            <th>
                Average
            </th>
            <th>
                Max
            </th>
            <th>
                total
            </th>
        </tr>
    </thead>
");


       var times = TimeTracker.IdentifiedElapseds;


     if (times.Count > 0)
    {

        Func<float, string> getColor = f => ColorTranslator.ToHtml(ColorExtensions.Interpolate(Color.FromArgb(255, 255, 255), f, Color.FromArgb(255, 0, 0)));

        var max = new
        {
            Count = (float)times.Values.Max(a => a.Count),
            LastTime = (float)times.Values.Max(a => a.LastTime),
            MinTime = (float)times.Values.Max(a => a.MinTime),
            Average = (float)times.Values.Max(a => a.Average),
            MaxTime = (float)times.Values.Max(a => a.MaxTime),
            TotalTime = (float)times.Values.Max(a => a.TotalTime),
        };

WriteLiteral("        <tbody>\r\n");


             foreach (var pair in times)
            {

WriteLiteral("                <tr style=\"background: #FFFFFF\">\r\n                    <td>\r\n     " +
"                   <span class=\"processName\">");


                                             Write(pair.Key.Split(' ')[0]);

WriteLiteral("</span>\r\n                    </td>\r\n                    <td>\r\n");


                         if (pair.Key.Split(' ').Length > 1)
                        {
WriteLiteral("<span class=\"entityName\">");


                                             Write(pair.Key.Split(' ')[1]);

WriteLiteral("</span>");


                                                                                }

WriteLiteral("                    </td>\r\n                    <td class=\"centered\" style=\"backgr" +
"ound:");


                                                      Write(getColor(pair.Value.Count / max.Count));

WriteLiteral("\">");


                                                                                               Write(pair.Value.Count);

WriteLiteral("\r\n                    </td>\r\n                    <td class=\"right\" style=\"backgro" +
"und:");


                                                   Write(getColor(pair.Value.LastTime/max.LastTime));

WriteLiteral("\">");


                                                                                                Write(pair.Value.LastTime);

WriteLiteral("\r\n                    </td>\r\n                    <td class=\"right\" style=\"backgro" +
"und:");


                                                   Write(getColor(pair.Value.MinTime / max.MinTime));

WriteLiteral("\">");


                                                                                                Write(pair.Value.MinTime);

WriteLiteral("\r\n                    </td>\r\n                    <td class=\"right\" style=\"backgro" +
"und:");


                                                   Write(getColor((float)pair.Value.Average / max.Average));

WriteLiteral("\">");


                                                                                                       Write(pair.Value.Average);

WriteLiteral("\r\n                    </td>\r\n                    <td class=\"right\" style=\"backgro" +
"und:");


                                                   Write(getColor(pair.Value.MaxTime / max.MaxTime));

WriteLiteral("\">");


                                                                                                Write(pair.Value.MaxTime);

WriteLiteral("\r\n                    </td>\r\n                    <td class=\"right\" style=\"backgro" +
"und:");


                                                   Write(getColor(pair.Value.TotalTime / max.TotalTime));

WriteLiteral("\">");


                                                                                                    Write(pair.Value.TotalTime);

WriteLiteral("\r\n                    </td>\r\n                </tr>\r\n");


            }

WriteLiteral("        </tbody>\r\n");


    }

WriteLiteral("</table>\r\n");


        }
    }
}
