//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.237
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Profiler/Views/Times.cshtml")]
    public class _Page_Profiler_Views_Times_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {


        public _Page_Profiler_Views_Times_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {

WriteLiteral(@"
<style type=""text/css"">
    .task
    {
        border-bottom: 1px solid #ddd;
    }
    .task .processName
    {
        font-size: 150%;
    }
    
    .task .numTimes
    {
        color: #666;
    }
    .task .max, .task .med, .task .min, .task .last
    {
        display: block;
        height: 10px;
        float: left;
        margin-right: 10px;
        margin-left: 0px;
    }
    
    .task .max
    {
        background: #b22222 url(../images/alert-overlay.png) repeat-x;
    }
    .task .med
    {
        background: #ff7722 url(../images/alert-overlay.png) repeat-x;
    }
    .task .min
    {
        background: #ffd700 url(../images/alert-overlay.png) repeat-x;
    }
    .task .last
    {
        background: #b27aff url(../images/alert-overlay.png) repeat-x;
    }
    .leftBorder
    {
        border-left: 1px solid #eee;
    }
    #tasks
    {
        width: 1200px;
    }
    
    #tasks .left
    {
        float: left;
    }    
    
    .sf-search-results .percentile0
    {
        background-color: #99CCFF;
    }
    .sf-search-results .percentile1
    {
        background-color: #fff;
    }
    .sf-search-results .percentile2
    {
        background-color: #FFCCCC;
    }
</style>

");


  
    ViewBag.Title = "Times";



Write(Html.ActionLink("Clear", "ClearTimes"));

WriteLiteral("\r\n<ul id=\"tasks\">\r\n");


       
       int maxWitdh = 600;
       long maxValue = maxWitdh;
       if (TimeTracker.IdentifiedElapseds.Count > 0)
       {
           maxValue = TimeTracker.IdentifiedElapseds.OrderByDescending(p => p.Value.MaxTime).FirstEx().Value.MaxTime;
       }

       double ratio = 1;
       if (maxValue != 0) 
       { 
           ratio = maxWitdh / (double)maxValue;
       }
    


     foreach (KeyValuePair<string, TimeTrackerEntry> pair in TimeTracker.IdentifiedElapseds.OrderByDescending(p => p.Value.Average))
    {

WriteLiteral(@"        <li class=""task"">
            <table>
                <tr>
                    <td>
                        <table>
                            <tr>
                                <td width=""300"">
                                    <span class=""processName"">");


                                                         Write(pair.Key.Split(' ')[0]);

WriteLiteral("</span>\r\n");


                                     if (pair.Key.Split(' ').Length > 1)
                                    {

WriteLiteral("                                        <br />\r\n");



WriteLiteral("                                        <span class=\"entityName\">");


                                                            Write(pair.Key.Split(' ')[1]);

WriteLiteral("</span>\r\n");


                                    }

WriteLiteral("                                </td>\r\n                            </tr>\r\n       " +
"                     <tr>\r\n                                <td>\r\n               " +
"                     <span class=\"numTimes\">Executed ");


                                                               Write(pair.Value.Count);

WriteLiteral(" ");


                                                                                  Write(pair.Value.Count == 1 ? "time" : "times");

WriteLiteral("</span>\r\n                                </td>\r\n                            </tr>" +
"\r\n                        </table>\r\n                    </td>\r\n                 " +
"   <td>\r\n                        <table>\r\n");


                             if (pair.Value.Count == 1)
                            {

WriteLiteral(@"                                <tr>
                                    <td width=""40"">
                                        Single:
                                    </td>
                                    <td class=""leftBorder"">
                                        <span class=""med"" style=""width:");


                                                                   Write((int)(pair.Value.Average * ratio));

WriteLiteral("px\"></span>");


                                                                                                                 Write(pair.Value.LastTime);

WriteLiteral("\r\n                                        ms (hace ");


                                             Write(new TimeSpan(DateTime.UtcNow.Subtract(pair.Value.LastDate).Ticks).ToShortString());

WriteLiteral(")\r\n                                    </td>\r\n                                </t" +
"r>\r\n");


                            }
                            else
                            {

WriteLiteral(@"                                <tr>
                                    <td width=""40"">
                                        Max
                                    </td>
                                    <td class=""leftBorder"">
                                        <span class=""max"" style=""width:");


                                                                   Write((int)(pair.Value.MaxTime * ratio));

WriteLiteral("px\"></span>");


                                                                                                                 Write(pair.Value.MaxTime);

WriteLiteral("\r\n                                        ms (hace ");


                                             Write(new TimeSpan(DateTime.UtcNow.Subtract(pair.Value.MaxDate).Ticks).ToShortString());

WriteLiteral(")\r\n                                    </td>\r\n                                </t" +
"r>\r\n");



WriteLiteral(@"                                <tr>
                                    <td width=""40"">
                                        Average
                                    </td>
                                    <td class=""leftBorder"">
                                        <span class=""med"" style=""width:");


                                                                   Write((int)(pair.Value.Average * ratio));

WriteLiteral("px\"></span>");


                                                                                                                 Write(pair.Value.Average);

WriteLiteral("\r\n                                        ms\r\n                                   " +
" </td>\r\n                                </tr>\r\n");



WriteLiteral(@"                                <tr>
                                    <td width=""40"">
                                        Min
                                    </td>
                                    <td class=""leftBorder"">
                                        <span class=""min"" style=""width:");


                                                                   Write((int)(pair.Value.MinTime * ratio));

WriteLiteral("px\"></span>");


                                                                                                                 Write(pair.Value.MinTime);

WriteLiteral("\r\n                                        ms (hace ");


                                             Write(new TimeSpan(DateTime.UtcNow.Subtract(pair.Value.MinDate).Ticks).ToShortString());

WriteLiteral(")\r\n                                    </td>\r\n                                </t" +
"r>\r\n");



WriteLiteral(@"                                <tr>
                                    <td width=""40"">
                                        Last
                                    </td>
                                    <td class=""leftBorder"">
                                        <span class=""last"" style=""width:");


                                                                    Write((int)(pair.Value.LastTime * ratio));

WriteLiteral("px\"></span>");


                                                                                                                   Write(pair.Value.LastTime);

WriteLiteral("\r\n                                        ms (hace ");


                                             Write(new TimeSpan(DateTime.UtcNow.Subtract(pair.Value.LastDate).Ticks).ToShortString());

WriteLiteral(")\r\n                                    </td>\r\n                                </t" +
"r> \r\n");


                            }

WriteLiteral("                        </table>\r\n                    </td>\r\n                </tr" +
">\r\n            </table>\r\n        </li>\r\n");


    }

WriteLiteral("</ul>\r\n</asp:Content> ");


        }
    }
}
