//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Utilities.ExpressionTrees;
    using Signum.Web.Profiler;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/Profiler/Views/HeavyDetails.cshtml")]
    public class _Page_Profiler_Views_HeavyDetails_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_Profiler_Views_HeavyDetails_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {


WriteLiteral("\r\n");


   HeavyProfilerEntry entry = (HeavyProfilerEntry)Model;

WriteLiteral("<h2>\r\n    Profiler Entry (\r\n");


     foreach (var e in entry.FollowC(a => a.Parent).Skip(1).Reverse())
    {
        
   Write(Html.ProfilerEntry(e.Index.ToString(), e.FullIndex()));


WriteLiteral(".\r\n");


        }

WriteLiteral("    ");


Write(entry.Index.ToString());

WriteLiteral(")</h2>\r\n");


Write(Html.ActionLink("(View all)", "ViewAll"));

WriteLiteral("\r\n<table class=\"sf-search-results\">\r\n    <tr>\r\n        <th>\r\n            Type\r\n  " +
"      </th>\r\n        <td>\r\n            ");


       Write(entry.Type.TryCC(t => t.TypeName()));

WriteLiteral("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <th>\r\n            Method\r\n        <" +
"/th>\r\n        <td>\r\n            ");


       Write(entry.Method.Name);

WriteLiteral("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <th>\r\n            File Line\r\n      " +
"  </th>\r\n        <td>\r\n            ");


       Write(entry.StackTrace.GetFrame(0).GetFileLineAndNumber());

WriteLiteral("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <th>\r\n            Role\r\n        </t" +
"h>\r\n        <td>\r\n            ");


       Write(entry.Role);

WriteLiteral("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <th>\r\n            Time\r\n        </t" +
"h>\r\n        <td>\r\n            ");


       Write(entry.Elapsed.NiceToString());

WriteLiteral("\r\n        </td>\r\n    </tr>\r\n    <tr>\r\n        <th>\r\n            Childs\r\n        <" +
"/th>\r\n        <td>\r\n            ");


       Write(entry.GetEntriesResume().TryToString());

WriteLiteral("\r\n        </td>\r\n    </tr>\r\n");


     foreach (var kvp in entry.GetDescendantRoles())
    { 

WriteLiteral("        <tr>\r\n            <th>\r\n                ");


           Write(kvp.Key);

WriteLiteral(" Childs\r\n            </th>\r\n            <td>\r\n                ");


           Write(kvp.Value.ToString(entry));

WriteLiteral("\r\n            </td>\r\n        </tr>\r\n");


    }

WriteLiteral("</table>\r\n<br />\r\n");


 if (entry.Entries != null)
{

WriteLiteral("    <h3>\r\n        Childs</h3>\r\n");


    Html.RenderPartial("ProfilerTable", entry.Entries);
}

WriteLiteral("<h3>\r\n    Aditional Data</h3>\r\n<div>\r\n    <pre>\r\n    <code>\r\n        ");


   Write(entry.AditionalData);

WriteLiteral(@"
    </code>
    </pre>
</div>
<br />
<h3>
    StackTrace</h3>
<table class=""sf-search-results"">
    <thead>
        <tr>
            <th>
                Type
            </th>
            <th>
                Method
            </th>
            <th>
                FileLine
            </th>
        </tr>
    </thead>
    <tbody>
");


         for (int i = 0; i < entry.StackTrace.FrameCount; i++)
        {
            var frame = entry.StackTrace.GetFrame(i);

WriteLiteral("            <tr>\r\n                <td>\r\n                    ");


               Write(frame.GetMethod().DeclaringType.TryCC(t => t.TypeName()));

WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");


               Write(frame.GetMethod().Name);

WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");


               Write(frame.GetFileLineAndNumber());

WriteLiteral("\r\n                </td>\r\n            </tr>\r\n");


        }

WriteLiteral("    </tbody>\r\n</table>\r\n<br />\r\n");


        }
    }
}
