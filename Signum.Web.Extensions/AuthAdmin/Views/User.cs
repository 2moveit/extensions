//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using Signum.Engine;
    using Signum.Entities.Authorization;
    using Signum.Web.Auth;
    using Signum.Web.Extensions.Properties;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/AuthAdmin/Views/User.cshtml")]
    public class _Page_AuthAdmin_Views_User_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_AuthAdmin_Views_User_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {

 using (var e = Html.TypeContext<UserDN>())
{
    
Write(Html.ValueLine(e, f => f.UserName, vl => vl.ValueHtmlProps["size"] = 50));

                                                                             
    if (e.Value.IsNew || (ViewData["NewPwd"] != null && bool.Parse(ViewData["NewPwd"].ToString())))
    {

WriteLiteral("    <label class=\"sf-label-line\">");


                            Write(Resources.ChangePasswordAspx_NewPassword);

WriteLiteral("</label>\r\n");


    
Write(Html.Password(UserMapping.NewPasswordKey, "", new Dictionary<string, string> { { "class", "sf-value-line" } }));

                                                                                                                   
    
Write(Html.ValidationMessage(UserMapping.NewPasswordKey));

                                                       

WriteLiteral("    <div class=\"clearall\">\r\n    </div>\r\n");


        

WriteLiteral("    <label class=\"sf-label-line\">");


                            Write(Resources.ChangePasswordAspx_ConfirmNewPassword);

WriteLiteral("</label>\r\n");


    
Write(Html.Password(UserMapping.NewPasswordBisKey, "", new Dictionary<string, string> { { "class", "sf-value-line" } }));

                                                                                                                      
    
Write(Html.ValidationMessage(UserMapping.NewPasswordBisKey));

                                                          
    }
     
Write(Html.ValueLine(e, f => f.PasswordNeverExpires));

                                                    
      
 Write(Html.ValueLine(e, f => f.PasswordSetDate));

                                                

    
Write(Html.ValueLine(e, f => f.Email, vl => vl.ValueHtmlProps["size"] = 30));

                                                                          
    
Write(Html.EntityLine(e, f => f.Role));

                                    
    
Write(Html.ValueLine(e, f => f.State));

                                    
    
Write(Html.EntityLine(e, f => f.Related));

                                       
}
WriteLiteral(" ");


        }
    }
}
