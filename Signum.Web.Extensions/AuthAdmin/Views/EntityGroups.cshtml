@using Signum.Entities.Basics
@Html.DynamicCss("~/authAdmin/Content/authAdmin.css")
@Html.ScriptsJs("~/authAdmin/Scripts/authAdmin.js")
<script type="text/javascript">
    $(function () {
        magicCheckBoxes($(document));
    });
</script>
@using (var tc = Html.TypeContext<EntityGroupRulePack>())
{
    @Html.EntityLine(tc, f => f.Role)
    <div class="clearall" ></div>

    <table class="ruleTable">
        <thead>
            <tr>
                <th>
                    @Resources.EntityGroupsAscx_EntityGroup
                </th>
                <th>
                    @Resources.TypesAscx_Create
                </th>
                <th>
                    @Resources.TypesAscx_Modify
                </th>
                <th>
                    @Resources.TypesAscx_Read
                </th>
                <th>
                    @Resources.TypesAscx_None
                </th>
                <th>
                    @Html.PropertyNiceName((RuleEntityGroupDN r)=>r.Priority)
                </th>
            </tr>
        </thead>
        @foreach (var item in tc.TypeElementContext(p => p.Rules))
        {
            <tr>
                <td style="vertical-align: middle">
                    @Html.Span(null, item.Value.Resource == null ? "[Fallback]" : item.Value.Resource.NiceToString())
                    @Html.Hidden(item.Compose("Resource"), item.Value.Resource == null ? "[FALLBACK]" : EnumDN.UniqueKey(item.Value.Resource))
                </td>
                <td>
                    <a class="cbLink create">
                        @Html.CheckBox(item.Compose("Create"), item.Value.Allowed.IsActive(TypeAllowedBasic.Create), new { tag = "Create" })
                    </a>
                </td>
                <td>
                    <a class="cbLink modify">
                        @Html.CheckBox(item.Compose("Modify"), item.Value.Allowed.IsActive(TypeAllowedBasic.Modify), new { tag = "Modify" })
                    </a>
                </td>
                <td>
                    <a class="cbLink read">
                        @Html.CheckBox(item.Compose("Read"), item.Value.Allowed.IsActive(TypeAllowedBasic.Read), new { tag = "Read" })
                    </a>
                </td>
                <td>
                    <a class="cbLink none">
                        @Html.CheckBox(item.Compose("None"), item.Value.Allowed.IsActive(TypeAllowedBasic.None), new { tag = "None" })
                    </a>
                </td>
                <td>
                    @Html.TextBox(item.Compose("Priority"), item.Value.Priority)
                </td>
            </tr>
        }
    </table>
} 
