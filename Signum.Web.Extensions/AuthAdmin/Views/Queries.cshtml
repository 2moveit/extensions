@Html.DynamicCss("~/authAdmin/Content/authAdmin.css")
@using (var tc = Html.TypeContext<QueryRulePack>())
{
    @Html.EntityLine(tc, f => f.Role)
    @Html.ValueLine(tc, f => f.DefaultRule, vl => { vl.UnitText = tc.Value.DefaultLabel; })
    @Html.EntityLine(tc, f => f.Type)

    <table class="ruleTable" id="queries">
        <thead>
            <tr>
                <th>
                    @Resources.QueriesAscx_Query
                </th>
                <th>
                    @Resources.QueriesAscx_Allow
                </th>
                <th>
                    @Resources.QueriesAscx_Deny
                </th>
                <th>
                    @Resources.QueriesAscx_Overriden
                </th>
            </tr>
        </thead>
        @foreach (var item in tc.TypeElementContext(p => p.Rules))
        {
            <tr>
                <td>
                    @Html.Span(null, item.Value.Resource.DisplayName)
                    @Html.Hidden(item.Compose("Resource_Key"), item.Value.Resource.Key)
                    @Html.Hidden(item.Compose("AllowedBase"), item.Value.AllowedBase)
                </td>
                <td>
                    <a class="cbLink allowed">
                        @Html.RadioButton(item.Compose("Allowed"), "True", item.Value.Allowed)
                    </a>
                </td>
                <td>
                    <a class="cbLink not-allowed">
                        @Html.RadioButton(item.Compose("Allowed"), "False", !item.Value.Allowed)
                    </a>
                </td>
                <td>
                    @Html.CheckBox(item.Compose("Overriden"), item.Value.Overriden, new { disabled = "disabled", @class = "sf-overriden" })
                </td>
            </tr>
        }
    </table>
} 