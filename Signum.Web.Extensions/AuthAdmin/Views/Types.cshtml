@using Signum.Web.AuthAdmin
@using Signum.Entities.Basics
@Html.DynamicCss("~/authAdmin/Content/SF_AuthAdmin.css")
@Html.ScriptsJs("~/authAdmin/Scripts/SF_AuthAdmin.js")
<script type="text/javascript">
    $(function () {
        SF.Auth.multiSelRadios($(document));
        SF.Auth.treeView();
        $(".sf-auth-rules .sf-submodule-trigger").click(SF.Auth.openDialog);
        $(".sf-auth-rules .sf-remove").live('click', SF.Auth.removeCondition);
        $(".sf-auth-rules .sf-create").live('click', function (e) {
            e.preventDefault();
            SF.Auth.chooseConditionToAdd($(this), '@Url.Action("GetChooser", "Signum")', "Choose condition");
        });
    });
</script>
@{
    bool propertyRules = Navigator.Manager.EntitySettings.ContainsKey(typeof(PropertyRulePack));
    bool operationRules = Navigator.Manager.EntitySettings.ContainsKey(typeof(OperationRulePack));
    bool queryRules = Navigator.Manager.EntitySettings.ContainsKey(typeof(QueryRulePack));
}
@using (var tc = Html.TypeContext<TypeRulePack>())
{
    @Html.EntityLine(tc, f => f.Role)
    @Html.ValueLine(tc, f => f.DefaultRule, vl => { vl.UnitText = tc.Value.DefaultLabel; })

    <table class="sf-auth-rules">
        <thead>
            <tr>
                <th>@Resources.TypesAscx_Type
                </th>
                <th>@Resources.TypesAscx_Create
                </th>
                <th>@Resources.TypesAscx_Modify
                </th>
                <th>@Resources.TypesAscx_Read
                </th>
                <th>@Resources.TypesAscx_None
                </th>
                <th>@Resources.TypesAscx_Overriden
                </th>
                @if (propertyRules)
                {
                    <th>@Resources.TypesAscx_Properties
                    </th>
                }
                @if (operationRules)
                {
                    <th>@Resources.TypesAscx_Operations
                    </th>
                }
                @if (queryRules)
                {
                    <th>@Resources.TypesAscx_Queries
                    </th>
                }
            </tr>
        </thead>
        @foreach (var iter in tc.TypeElementContext(p => p.Rules).GroupBy(a => a.Value.Resource.Namespace).OrderBy(a => a.Key).Iterate())
        {
            <tr>
                <td colspan="6">
                    <a class="sf-auth-namespace"><span class="sf-auth-tree @(iter.IsLast ? "sf-auth-expanded-last" : "sf-auth-expanded")">
                    </span>
                        <img src="@Url.Content("~/authAdmin/Images/namespace.png")" />
                        <span class="sf-auth-namespace-name">@iter.Value.Key</span> </a>
                </td>
            </tr>
            foreach (var iter2 in iter.Value.OrderBy(a => a.Value.Resource.FriendlyName).Iterate())
            {
                var item = iter2.Value;
            <tr class="sf-auth-type" data-ns="@iter.Value.Key" data-type="@item.Value.Resource.ClassName">
                <td>
                    <div class="sf-auth-tree @(iter.IsLast ? "sf-auth-blank" : "sf-auth-line")">
                    </div>
                    <div class="sf-auth-tree @(iter2.IsLast ? "sf-auth-leaf-last" : "sf-auth-leaf")">
                    </div>
                    @if (!item.Value.AvailableConditions.IsNullOrEmpty())
                    {
                        <a title="@Resources.AuthAdmin_AddCondition" class="sf-line-button sf-create" data-icon="ui-icon-circle-plus" data-text="false" style="@(item.Value.Allowed.Conditions.Count == item.Value.AvailableConditions.Count ? "display:none" : "")">
                        </a>
                        <input type="hidden" disabled="disabled" class="sf-auth-available-conditions" value="@item.Value.AvailableConditions.Select(ac => EnumDN.UniqueKey(ac)).ToString(",")" />
                    }
                    <span class="sf-auth-label">@item.Value.Resource.FriendlyName</span>
                    @Html.HiddenRuntimeInfo(item, i => i.Resource)
                    @Html.Hidden(item.Compose("AllowedBase"), item.Value.AllowedBase.Fallback.ToStringParts() + (item.Value.AllowedBase.Conditions.IsEmpty() ? "" : (";" + item.Value.AllowedBase.Conditions.ToString(a => "{0}-{1}".Formato(a.ConditionName, a.Allowed.ToStringParts()), ";"))))
                </td>
                @using (var fallback = item.SubContext(a => a.Allowed.Fallback))
                {
                    <td>
                        <a class="sf-auth-chooser sf-auth-create">
                            @Html.CheckBox(fallback.Compose("Create"), fallback.Value.IsActive(TypeAllowedBasic.Create), new Dictionary<string, object> { { "data-tag", "Create" } })
                        </a>
                    </td>
                    <td>
                        <a class="sf-auth-chooser sf-auth-modify">
                            @Html.CheckBox(fallback.Compose("Modify"), fallback.Value.IsActive(TypeAllowedBasic.Modify), new Dictionary<string, object> { { "data-tag", "Modify" } })
                        </a>
                    </td>
                    <td>
                        <a class="sf-auth-chooser sf-auth-read">
                            @Html.CheckBox(fallback.Compose("Read"), fallback.Value.IsActive(TypeAllowedBasic.Read), new Dictionary<string, object> { { "data-tag", "Read" } })
                        </a>
                    </td>
                    <td>
                        <a class="sf-auth-chooser sf-auth-none">
                            @Html.CheckBox(fallback.Compose("None"), fallback.Value.IsActive(TypeAllowedBasic.None), new Dictionary<string, object> { { "data-tag", "None" } })
                        </a>
                    </td>
                }
                <td class="sf-auth-type-only">
                    @Html.CheckBox(item.Compose("Overriden"), item.Value.Overriden, new { disabled = "disabled", @class = "sf-auth-overriden" })
                </td>
                @if (propertyRules)
                {
                    <td class="sf-auth-type-only">
                        @if (item.Value.Properties.HasValue)
                        {
                            <div class="sf-auth-property">
                                <a class="sf-submodule-trigger" href="@Url.Action((AuthAdminController a) => a.Properties(tc.Value.Role, item.Value.Resource.ToLite(), null))">
                                    <span class="sf-auth-thumb sf-auth-@item.Value.Properties.ToString().ToLower()">
                                    </span></a>
                            </div>
                        }
                    </td>
                }
                @if (operationRules)
                {
                    <td class="sf-auth-type-only">
                        @if (item.Value.Operations.HasValue)
                        {
                            <div class="sf-auth-operation">
                                <a class="sf-submodule-trigger" href="@Url.Action((AuthAdminController a) => a.Operations(tc.Value.Role, item.Value.Resource.ToLite(), null))">
                                    <span class="sf-auth-thumb sf-auth-@item.Value.Operations.ToString().ToLower()">
                                    </span></a>
                            </div>
                        }
                    </td>
                }
                @if (queryRules)
                {
                    <td class="sf-auth-type-only">
                        @if (item.Value.Queries.HasValue)
                        {
                            <div class="sf-auth-query">
                                <a class="sf-submodule-trigger" href="@Url.Action((AuthAdminController a) => a.Queries(tc.Value.Role, item.Value.Resource.ToLite(), null))">
                                    <span class="sf-auth-thumb sf-auth-@item.Value.Queries.ToString().ToLower()"></span>
                                </a>
                            </div>
                        }
                    </td>
                }
            </tr>
                    var conditions = item.Compose("Allowed", "Conditions"); 
                
                    foreach (var conditionIter in item.Value.Allowed.Conditions.Select((c, i) => new { Condition = c, Index = i, ControlId =  TypeContextUtilities.Compose(conditions, i.ToString())}).Iterate())
                    {
                        var condition = conditionIter.Value.Condition;
                        var controlId = conditionIter.Value.ControlId;
                        
            <tr class="sf-auth-condition" data-ns="@iter.Value.Key" data-type="@item.Value.Resource.ClassName" data-condition="@EnumDN.UniqueKey(condition.ConditionName)" data-index="@conditionIter.Value.Index">
                <td>
                    <div class="sf-auth-tree @(iter.IsLast ? "sf-auth-blank" : "sf-auth-line")">
                    </div>
                    <div class="sf-auth-tree @(iter2.IsLast ? "sf-auth-blank" : "sf-auth-line")">
                    </div>
                    <div class="sf-auth-tree @(conditionIter.IsLast ? "sf-auth-leaf-last" : "sf-auth-leaf")">
                    </div>
                    <a title="@Resources.AuthAdmin_RemoveCondition" class="sf-line-button sf-remove" data-icon="ui-icon-circle-close" data-text="false">
                    </a><span class="sf-auth-label">@condition.ConditionName.NiceToString()</span>
                    @Html.Hidden(TypeContextUtilities.Compose(controlId, "ConditionName"), EnumDN.UniqueKey(condition.ConditionName))
                </td>
                
                @{var allowed = TypeContextUtilities.Compose(controlId, "Allowed");}
                
                    <td>
                        <a class="sf-auth-chooser sf-auth-create">
                            @Html.CheckBox(TypeContextUtilities.Compose(allowed, "Create"), condition.Allowed.IsActive(TypeAllowedBasic.Create), new Dictionary<string, object> { { "data-tag", "Create" } })
                        </a>
                    </td>
                    <td>
                        <a class="sf-auth-chooser sf-auth-modify">
                            @Html.CheckBox(TypeContextUtilities.Compose(allowed, "Modify"), condition.Allowed.IsActive(TypeAllowedBasic.Modify), new Dictionary<string, object> { { "data-tag", "Modify" } })
                        </a>
                    </td>
                    <td>
                        <a class="sf-auth-chooser sf-auth-read">
                            @Html.CheckBox(TypeContextUtilities.Compose(allowed, "Read"), condition.Allowed.IsActive(TypeAllowedBasic.Read), new Dictionary<string, object> { { "data-tag", "Read" } })
                        </a>
                    </td>
                    <td>
                        <a class="sf-auth-chooser sf-auth-none">
                            @Html.CheckBox(TypeContextUtilities.Compose(allowed, "None"), condition.Allowed.IsActive(TypeAllowedBasic.None), new Dictionary<string, object> { { "data-tag", "None" } })
                        </a>
                    </td>
                
                <td colspan="@(1 + (propertyRules ? 1 : 0) + (operationRules ? 1 : 0) + (queryRules ? 1 : 0))">
                </td>
            </tr>
                    }
                
            }
        }
    </table>
}
