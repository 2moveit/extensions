@using Signum.Web.AuthAdmin
@Html.DynamicCss("~/authAdmin/Content/SF_AuthAdmin.css")
@Html.ScriptsJs("~/authAdmin/Scripts/SF_AuthAdmin.js")
<script type="text/javascript">
    $(function () {
        SF.Auth.multiSelRadios($(document));
        SF.Auth.treeView();
        $(".sf-auth-rules .sf-submodule-trigger").click(SF.Auth.openDialog); 
    });
</script>
@using (var tc = Html.TypeContext<TypeRulePack>())
{
    @Html.EntityLine(tc, f => f.Role)
    @Html.ValueLine(tc, f => f.DefaultRule, vl => { vl.UnitText = tc.Value.DefaultLabel; })

    <table class="sf-auth-rules">
        <thead>
            <tr>
                <th>@Resources.TypesAscx_Type
                </th>
                <th>@Resources.TypesAscx_Create
                </th>
                <th>@Resources.TypesAscx_Modify
                </th>
                <th>@Resources.TypesAscx_Read
                </th>
                <th>@Resources.TypesAscx_None
                </th>
                <th>@Resources.TypesAscx_Overriden
                </th>
                @if (Navigator.Manager.EntitySettings.ContainsKey(typeof(PermissionRulePack)))
                {
                    <th>@Resources.TypesAscx_Properties
                    </th>
                }
                @if (Navigator.Manager.EntitySettings.ContainsKey(typeof(OperationRulePack)))
                {
                    <th>@Resources.TypesAscx_Operations
                    </th>
                }
                @if (Navigator.Manager.EntitySettings.ContainsKey(typeof(QueryRulePack)))
                {
                    <th>@Resources.TypesAscx_Queries
                    </th>
                }
            </tr>
        </thead>
        @foreach (var iter in tc.TypeElementContext(p => p.Rules).GroupBy(a => a.Value.Resource.Namespace).OrderBy(a => a.Key).Iterate())
        {
            <tr>
                <td colspan="6">
                    <a class="sf-auth-namespace">
                        <span class="sf-auth-tree @(iter.IsLast ? "sf-auth-expanded-last" : "sf-auth-expanded")">
                        </span>
                        <img src="@Url.Content("~/authAdmin/Images/namespace.png")" />
                        <span class="sf-auth-namespace-name">@iter.Value.Key</span>
                    </a>
                </td>
            </tr>
                   foreach (var iter2 in iter.Value.OrderBy(a => a.Value.Resource.FriendlyName).Iterate())
                   {
                       var item = iter2.Value;
            <tr data-namespace="@iter.Value.Key">
                <td>
                    <div class="sf-auth-tree @(iter.IsLast ? "sf-auth-blank" : "sf-auth-line")">
                    </div>
                    <div class="sf-auth-tree @(iter2.IsLast ? "sf-auth-leaf-last" : "sf-auth-leaf")">
                    </div>
                    <img src="@Url.Content("~/authAdmin/Images/class.png")" />
                    <span>@item.Value.Resource.FriendlyName</span>
                    @Html.HiddenRuntimeInfo(item, i => i.Resource)
                    @Html.Hidden(item.Compose("AllowedBase"), item.Value.AllowedBase.Base.ToStringParts() + (item.Value.AllowedBase.Conditions.IsEmpty()? "":( ";" + item.Value.AllowedBase.Conditions.ToString(a=>"{0}-{1}".Formato(a.ConditionName, a.Allowed.ToStringParts()), ";"))))
                </td>
                <td>
                    <a class="sf-auth-chooser sf-auth-create">
                        @Html.CheckBox(item.Compose("Allowed_Create"), item.Value.Allowed.Base.IsActive(TypeAllowedBasic.Create), new { tag = "Create" })
                    </a>
                </td>
                <td>
                    <a class="sf-auth-chooser sf-auth-modify">
                        @Html.CheckBox(item.Compose("Allowed_Modify"), item.Value.Allowed.Base.IsActive(TypeAllowedBasic.Modify), new { tag = "Modify" })
                    </a>
                </td>
                <td>
                    <a class="sf-auth-chooser sf-auth-read">
                        @Html.CheckBox(item.Compose("Allowed_Read"), item.Value.Allowed.Base.IsActive(TypeAllowedBasic.Read), new { tag = "Read" })
                    </a>
                </td>
                <td>
                    <a class="sf-auth-chooser sf-auth-none">
                        @Html.CheckBox(item.Compose("Allowed_None"), item.Value.Allowed.Base.IsActive(TypeAllowedBasic.None), new { tag = "None" })
                    </a>
                </td>
                <td>
                    @Html.CheckBox(item.Compose("Overriden"), item.Value.Overriden, new { disabled = "disabled", @class = "sf-auth-overriden" })
                </td>
                @if (Navigator.Manager.EntitySettings.ContainsKey(typeof(PropertyRulePack)))
                {
                    <td>
                        @if (item.Value.Properties.HasValue)
                        {
                            <div class="sf-auth-property">
                                <a class="sf-submodule-trigger" href="@Url.Action((AuthAdminController a) => a.Properties(tc.Value.Role, item.Value.Resource.ToLite(), null))">
                                    <span class="sf-auth-thumb sf-auth-@item.Value.Properties.ToString().ToLower()"></span>
                                </a>
                            </div>
                        }
                    </td>
                }
                @if (Navigator.Manager.EntitySettings.ContainsKey(typeof(OperationRulePack)))
                {
                    <td>
                        @if (item.Value.Operations.HasValue)
                        {
                            <div class="sf-auth-operation">
                                <a class="sf-submodule-trigger" href="@Url.Action((AuthAdminController a) => a.Operations(tc.Value.Role, item.Value.Resource.ToLite(), null))">
                                    <span class="sf-auth-thumb sf-auth-@item.Value.Operations.ToString().ToLower()"></span>
                                </a>
                            </div>
                        }
                    </td>
                }
                @if (Navigator.Manager.EntitySettings.ContainsKey(typeof(QueryRulePack)))
                {
                    <td>
                        @if (item.Value.Queries.HasValue)
                        {
                            <div class="sf-auth-query">
                                <a class="sf-submodule-trigger" href="@Url.Action((AuthAdminController a) => a.Queries(tc.Value.Role, item.Value.Resource.ToLite(), null))">
                                    <span class="sf-auth-thumb sf-auth-@item.Value.Queries.ToString().ToLower()"></span>
                                </a>
                            </div>
                        }
                    </td>
                }
            </tr>
                   }
        }
    </table>
}
