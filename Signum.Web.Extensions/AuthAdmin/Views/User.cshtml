@using (var e = Html.TypeContext<UserDN>())
{
    @Html.ValueLine(e, f => f.State, v => v.ReadOnly = true)
    @Html.ValueLine(e, f => f.UserName, vl => vl.ValueHtmlProps["size"] = 50)
    if (e.Value.IsNew || (ViewData["NewPwd"] != null && bool.Parse(ViewData["NewPwd"].ToString())))
    {
        @Html.Field(AuthMessage.ChangePasswordAspx_NewPassword.NiceToString(),
            Html.Password(e.Compose(UserMapping.NewPasswordKey), "", new Dictionary<string, string> { { "class", "sf-value-line" } }).Concat(
            Html.ValidationMessage(e.Compose(UserMapping.NewPasswordKey)) ?? MvcHtmlString.Empty))
    
        @Html.Field(AuthMessage.ChangePasswordAspx_ConfirmNewPassword.NiceToString(), 
            Html.Password(e.Compose(UserMapping.NewPasswordBisKey), "", new Dictionary<string, string> { { "class", "sf-value-line" } }).Concat(
            Html.ValidationMessage(e.Compose(UserMapping.NewPasswordBisKey)) ?? MvcHtmlString.Empty))
    }
    @Html.ValueLine(e, f => f.PasswordNeverExpires)
    @Html.ValueLine(e, f => f.PasswordSetDate)

    @Html.ValueLine(e, f => f.Email, vl => vl.ValueHtmlProps["size"] = 30)
    @Html.EntityCombo(e, f => f.CultureInfo)
    @Html.EntityLine(e, f => f.Role)
    @Html.EntityLine(e, f => f.Related)
}