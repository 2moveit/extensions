//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using Signum.Engine;
    using Signum.Entities.Authorization;
    using Signum.Web.Auth;
    using Signum.Web.Extensions.Properties;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/AuthAdmin/Views/Types.cshtml")]
    public class _Page_AuthAdmin_Views_Types_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_AuthAdmin_Views_Types_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {

Write(Html.DynamicCss("~/authAdmin/Content/authAdmin.css"));

WriteLiteral("\r\n");


Write(Html.ScriptsJs("~/authAdmin/Scripts/authAdmin.js"));

WriteLiteral("\r\n<script type=\"text/javascript\">\r\n    $(function () {\r\n        magicCheckBoxes($" +
"(document));\r\n        treeView();\r\n    });\r\n</script>\r\n");


 using (var tc = Html.TypeContext<TypeRulePack>())
{
    
Write(Html.EntityLine(tc, f => f.Role));

                                     ;
    
Write(Html.ValueLine(tc, f => f.DefaultRule, vl => { vl.UnitText = tc.Value.DefaultLabel; }));

                                                                                           ;




WriteLiteral("    <table class=\"ruleTable\">\r\n        <thead>\r\n            <tr>\r\n               " +
" <th>");


               Write(Resources.TypesAscx_Type);

WriteLiteral("\r\n                </th>\r\n                <th>");


               Write(Resources.TypesAscx_Create);

WriteLiteral("\r\n                </th>\r\n                <th>");


               Write(Resources.TypesAscx_Modify);

WriteLiteral("\r\n                </th>\r\n                <th>");


               Write(Resources.TypesAscx_Read);

WriteLiteral("\r\n                </th>\r\n                <th>");


               Write(Resources.TypesAscx_None);

WriteLiteral("\r\n                </th>\r\n                <th>");


               Write(Resources.TypesAscx_Overriden);

WriteLiteral("\r\n                </th>\r\n");


                 if (Navigator.Manager.EntitySettings.ContainsKey(typeof(PermissionRulePack)))
                {

WriteLiteral("                    <th>");


                   Write(Resources.TypesAscx_Properties);

WriteLiteral("\r\n                    </th>\r\n");


                }


                 if (Navigator.Manager.EntitySettings.ContainsKey(typeof(OperationRulePack)))
                {

WriteLiteral("                    <th>");


                   Write(Resources.TypesAscx_Operations);

WriteLiteral("\r\n                    </th>\r\n");


                }


                 if (Navigator.Manager.EntitySettings.ContainsKey(typeof(QueryRulePack)))
                {

WriteLiteral("                    <th>");


                   Write(Resources.TypesAscx_Queries);

WriteLiteral("\r\n                    </th>\r\n");


                }

WriteLiteral("            </tr>\r\n        </thead>\r\n");


         foreach (var iter in tc.TypeElementContext(p => p.Rules).GroupBy(a => a.Value.Resource.Namespace).OrderBy(a => a.Key).Iterate())
        {

WriteLiteral("            <tr>\r\n                <td colspan=\"6\">\r\n                    <a class=" +
"\"namespace\">\r\n                        <div class=\"treeView ");


                                         Write(iter.IsLast ? "tvExpandedLast" : "tvExpanded");

WriteLiteral("\">\r\n                        </div>\r\n                        <img src=\"");


                             Write(Url.Content("~/authAdmin/Images/namespace.png"));

WriteLiteral("\" />\r\n                        ");


                   Write(Html.Span(null, iter.Value.Key, "namespace"));

WriteLiteral("\r\n                    </a>\r\n                </td>\r\n            </tr>\r\n");


                   foreach (var iter2 in iter.Value.OrderBy(a => a.Value.Resource.FriendlyName).Iterate())
                   {
                       var item = iter2.Value;

WriteLiteral("            <tr>\r\n                <td>\r\n                    <div class=\"treeView " +
"");


                                     Write(iter.IsLast ? "tvBlank" : "tvLine");

WriteLiteral("\">\r\n                    </div>\r\n                    <div class=\"treeView ");


                                     Write(iter2.IsLast ? "tvLeafLast" : "tvLeaf");

WriteLiteral("\">\r\n                    </div>\r\n                    <img src=\"");


                         Write(Url.Content("~/authAdmin/Images/class.png"));

WriteLiteral("\" />\r\n                    ");


               Write(Html.Span(null, item.Value.Resource.FriendlyName));

WriteLiteral("\r\n                    ");


               Write(Html.HiddenRuntimeInfo(item, i => i.Resource));

WriteLiteral("\r\n                    ");


               Write(Html.Hidden(item.Compose("AllowedBase"), item.Value.AllowedBase.ToStringParts()));

WriteLiteral("\r\n                    ");


               Write(Html.Span(null, iter.Value.Key, "namespace", new Dictionary<string, object> { { "style", "display:none" } }));

WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    <a class=\"cbLi" +
"nk create\">\r\n                        ");


                   Write(Html.CheckBox(item.Compose("Allowed_Create"), item.Value.Allowed.IsActive(TypeAllowedBasic.Create), new { tag = "Create" }));

WriteLiteral("\r\n                    </a>\r\n                </td>\r\n                <td>\r\n        " +
"            <a class=\"cbLink modify\">\r\n                        ");


                   Write(Html.CheckBox(item.Compose("Allowed_Modify"), item.Value.Allowed.IsActive(TypeAllowedBasic.Modify), new { tag = "Modify" }));

WriteLiteral("\r\n                    </a>\r\n                </td>\r\n                <td>\r\n        " +
"            <a class=\"cbLink read\">\r\n                        ");


                   Write(Html.CheckBox(item.Compose("Allowed_Read"), item.Value.Allowed.IsActive(TypeAllowedBasic.Read), new { tag = "Read" }));

WriteLiteral("\r\n                    </a>\r\n                </td>\r\n                <td>\r\n        " +
"            <a class=\"cbLink none\">\r\n                        ");


                   Write(Html.CheckBox(item.Compose("Allowed_None"), item.Value.Allowed.IsActive(TypeAllowedBasic.None), new { tag = "None" }));

WriteLiteral("\r\n                    </a>\r\n                </td>\r\n                <td>\r\n        " +
"            ");


               Write(Html.CheckBox(item.Compose("Overriden"), item.Value.Overriden, new { disabled = "disabled", @class = "overriden" }));

WriteLiteral("\r\n                </td>\r\n");


                 if (Navigator.Manager.EntitySettings.ContainsKey(typeof(PropertyRulePack)))
                {

WriteLiteral("                    <td>\r\n");


                         if (item.Value.Properties.HasValue)
                        {

WriteLiteral("                            <a href=\"javascript:openDialog(\'AuthAdmin/Properties\'" +
", {role:");


                                                                                    Write(tc.Value.Role.Id);

WriteLiteral(", type:");


                                                                                                            Write(item.Value.Resource.Id);

WriteLiteral("});\">\r\n                                <div class=\"property\">\r\n                  " +
"                  <div class=\"thumb ");


                                                 Write(item.Value.Properties.ToString().ToLower());

WriteLiteral("\">\r\n                                    </div>\r\n                                <" +
"/div>\r\n                            </a>\r\n");


                        }

WriteLiteral("                    </td>\r\n");


                }


                 if (Navigator.Manager.EntitySettings.ContainsKey(typeof(OperationRulePack)))
                {

WriteLiteral("                    <td>\r\n");


                         if (item.Value.Operations.HasValue)
                        {

WriteLiteral("                            <a href=\"javascript:openDialog(\'AuthAdmin/Operations\'" +
", {role:");


                                                                                    Write(tc.Value.Role.Id);

WriteLiteral(", type:");


                                                                                                            Write(item.Value.Resource.Id);

WriteLiteral("});\">\r\n                                <div class=\"operation\">\r\n                 " +
"                   <div class=\"thumb ");


                                                 Write(item.Value.Operations.ToString().ToLower());

WriteLiteral("\">\r\n                                    </div>\r\n                                <" +
"/div>\r\n                            </a>\r\n");


                        }

WriteLiteral("                    </td>\r\n");


                }


                 if (Navigator.Manager.EntitySettings.ContainsKey(typeof(QueryRulePack)))
                {

WriteLiteral("                    <td>\r\n");


                         if (item.Value.Queries.HasValue)
                        {

WriteLiteral("                            <a href=\"javascript:openDialog(\'AuthAdmin/Queries\', {" +
"role:");


                                                                                 Write(tc.Value.Role.Id);

WriteLiteral(", type:");


                                                                                                         Write(item.Value.Resource.Id);

WriteLiteral("});\">\r\n                                <div class=\"query\">\r\n                     " +
"               <div class=\"thumb ");


                                                 Write(item.Value.Queries.ToString().ToLower());

WriteLiteral("\">\r\n                                    </div>\r\n                                <" +
"/div>\r\n                            </a>\r\n");


                        }

WriteLiteral("                    </td>\r\n");


                }

WriteLiteral("            </tr>\r\n");


                   }
        }

WriteLiteral("    </table>\r\n");


}
WriteLiteral(" ");


        }
    }
}
