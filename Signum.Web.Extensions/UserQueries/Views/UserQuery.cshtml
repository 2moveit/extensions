@using Signum.Engine
@using Signum.Entities.Reports
@using Signum.Entities.Basics

@using (var e = Html.TypeContext<UserQueryDN>())
{
    @Html.EntityLine(e, f => f.Related, el => el.Create = false)
using (var query = e.SubContext(f => f.Query))
{
    @Html.HiddenRuntimeInfo(query)
    @Html.Span("Query", "Query", "sf-label-line")
    if (ViewData[ViewDataKeys.QueryName] != null)
    {
    @Html.Href("hrefQuery", query.Value.DisplayName, Navigator.FindRoute(ViewData[ViewDataKeys.QueryName]), "", "sf-value-line", null)
    }
    else 
    { 
        @Html.Span("spanQuery", query.Value.DisplayName, "sf-value-line")
    }
        
    <div class="clearall">
    </div>
        
    @Html.Hidden(query.Compose("Key"), query.Value.Key)
    @Html.Hidden(query.Compose("DisplayName"), query.Value.DisplayName)
}
    @Html.ValueLine(e, f => f.DisplayName)
    <br />
    @Html.EntityRepeater(e, f => f.Filters, er => { er.PreserveViewData = true;})
    <br />
    @Html.ValueLine(e, f => f.ColumnsMode)
    @Html.EntityRepeater(e, f => f.Columns, er => { er.PreserveViewData = true;})
    <br />
    @Html.EntityRepeater(e, f => f.Orders, er => { er.PreserveViewData = true; })
    <br />
    @Html.ValueLine(e, f => f.MaxItems)
} 
