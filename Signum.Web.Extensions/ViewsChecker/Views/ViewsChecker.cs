//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ASP
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net;
    using System.Web;
    using System.Web.Helpers;
    using System.Web.Security;
    using System.Web.UI;
    using System.Web.WebPages;
    using System.Web.Mvc;
    using System.Web.Mvc.Ajax;
    using System.Web.Mvc.Html;
    using System.Web.Routing;
    using Signum.Utilities;
    using Signum.Entities;
    using Signum.Web;
    using System.Collections;
    using System.Collections.Specialized;
    using System.ComponentModel.DataAnnotations;
    using System.Configuration;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Web.Caching;
    using System.Web.DynamicData;
    using System.Web.SessionState;
    using System.Web.Profile;
    using System.Web.UI.WebControls;
    using System.Web.UI.WebControls.WebParts;
    using System.Web.UI.HtmlControls;
    using System.Xml.Linq;
    using Signum.Web.ViewsChecker;
    using Signum.Web.Extensions.Properties;
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MvcRazorClassGenerator", "1.0")]
    [System.Web.WebPages.PageVirtualPathAttribute("~/ViewsChecker/Views/ViewsChecker.cshtml")]
    public class _Page_ViewsChecker_Views_ViewsChecker_cshtml : System.Web.Mvc.WebViewPage<dynamic>
    {
#line hidden

        public _Page_ViewsChecker_Views_ViewsChecker_cshtml()
        {
        }
        protected System.Web.HttpApplication ApplicationInstance
        {
            get
            {
                return ((System.Web.HttpApplication)(Context.ApplicationInstance));
            }
        }
        public override void Execute()
        {



  
    ViewBag.Title = Resources.ViewsChecker;
    List<ViewError> errors = (List<ViewError>)Model;


WriteLiteral("<h1>");


Write(Resources.ViewsChecker);

WriteLiteral("</h1>\r\n\r\n");


 if (errors == null || errors.Count == 0)
{

WriteLiteral("    <h2>No errors found</h2>\r\n");


}
else
{

WriteLiteral("    <h2>There are a total of ");


                        Write(errors.Count);

WriteLiteral(" errors</h2>\r\n");



WriteLiteral("    <div>\r\n        <table border=\"solid 1px black\" cellpadding=\"5px\" cellspacing=" +
"\"1\">\r\n            <tr valign=\"top\" style=\"font-weight: bold\">\r\n                <" +
"td>\r\n                    ");


               Write(Resources.ViewName);

WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");


               Write(Resources.Message);

WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");


               Write(Resources.Source);

WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");


               Write(Resources.StackTrace);

WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");


               Write(Resources.TargetSite);

WriteLiteral("\r\n                </td>\r\n            </tr>\r\n");


             foreach (ViewError error in errors)
            {

WriteLiteral("                <tr valign=\"top\">\r\n                    <td>");


                   Write(error.ViewName);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(error.Message);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(error.Source);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(error.StackTrace);

WriteLiteral("\r\n                    </td>\r\n                    <td>");


                   Write(error.TargetSite);

WriteLiteral("\r\n                    </td>\r\n                </tr>\r\n");


            }

WriteLiteral("        </table>\r\n    </div>\r\n");


}
WriteLiteral(" } ");


        }
    }
}
