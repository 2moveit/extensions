<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Lines" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Height" ColumnType="Positionable" />
  </Columns>
  <Icon FileName="multilines.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAx5JREFUeNpi/P//P8NgBkwMgxwMDQfGFi/+PxqCow4cIMBCjqbjneLwNGtZ/pJxNIpJAR9f3fRF5j8+0v3/3p7a/5/QxKkGQDVJTNGi/yCaGHxtS/n/xyemoqh/cnzi/7sbYog2gxRMUgje3Fr4X4znJ4OMeRZKupO2yGNkU/D3e7Qzl+zyFJSuYZisKAZZLiCpySBs3481U8joh2xmVIxgeLIh4D9dcjGyT9iUQhgktb0ZxLW88OZYWTVrxuPrg/4/Bup9y6DI4FN+guQc/o+BmfRiRkndiEGQgOPQgQDDU5IcJqUfxiDvMZmRrFwsqJdMckgwM/xiOLO55f/z4z0Eo/zq9tr/PLx8pOXiu1tzKM6V717e8X20M+//272pOM26vrPx/6s9Gf9JysWvt4X9F5Y3xulj3/Qp/2EYb8iLKW/mNcjz+/3rG8OzPXkYaq8fmOIrxnSPQdR5OiOBTILQ+3KT739xv81Uq74EgI5k8FjCeG9fE7gIAWUCJoa/4CqS/+elTULuC/DaxQTSlCVWCs61b3fGUNVxKBnNqY4Rkuj/gvkvtsf8l3KfxUhSMcNu2upHSENi48b/m2fmwA3uWnz8v7gwD0O8ly5JHpPwXEKUesZjHWLg+P3GIMTgXH4dr6bmuYf/1ybbYqiZvfHC/xdvPjNgkyMWIKdn5AAgqi7eceLe/6pp+wjm6vS2Lf/XH7xFVu73SZv8H4aRxVmI8ZGymirDhGJ3gqEzo9KbEaRv7tKd/zFCgpYNVmIcRynQN9BhaMl0IK8moTXI7Nj239lClfiaZOuxu/87Fh6jqCbZfuL+/+rp+/9vOnIXrzmdi47/33HyAU41GA4EJfKCvp1Ua3y2zj+K06y6mQf/r9hzA69dKGlw4+Hb/28/fMPQX+hGtTRnqCHFUDP9wH8zPTmG2Yu2wcUdHcwYpMT4GMKd1fHaxQjK1jCOnoE2Q2umI00yROXU/f+vXLoK57s4WTDkh5sQtAslk9DKcSDQno1qNjGOI7tfTC4gq1wktVdHbzx0hj4G0xDc4t5YeFJgHB0CHnXgqAPxA4AAAwBZvKXgQxkvbwAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
  
  var dimension1 = _.uniq(_.map(data.rows, function(r){return r.c0; }), false, function(c) { return c.toString();});
  
  var series = _.toArray(º.groupBy(data.rows, function(r){return r.c1;}, function(list){
    
    var obj = º.toObject(list, function(r){return r.c0; });
    
    return {
      dimension2 : _.first(list).c1,
      values : _.map(dimension1, function(d1){ return obj[d1]; })
    };
    
  }));
  
  var xRule = º.rule({
    _1 : 5,
    title : 15,
    _2 : 10, 
    labels : 20,
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 10,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = º.rule({
    _1 : 5,
    legend : 15,
    _2 : 5,
    content: '*',
    ticks: 4,
    _3 : 5,
    labels0: 15,
    labels1: 15,
    _4 : 10,
    title: 15,
    _5 : 5,
  }, height);
  //yRule.debugY(chart);
  
  var x = d3.scale.ordinal()
      .domain($.map(dimension1, function (d) { return d; }))
      .rangeBands([0, xRule.size('content')]);
  
  var y =  º.scaleFor(data.columns.c2, data.rows.map(function(r){return r.c2;}), 0, yRule.size('content'));
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content')+ (x.rangeBand() / 2), yRule.start('ticks')))
    .enterData(dimension1, 'line', 'x-tick')
      .attr('y2',  function (d, i) { return yRule.start('labels' + (i % 2)) - yRule.start('ticks'); })
      .attr('x1', function (d) { return x(d); })
      .attr('x2', function (d) { return x(d); })
      .style('stroke', 'Black');
  
  if ((x.rangeBand() * 2) > 60) 
  {
    chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content')+ (x.rangeBand() / 2), yRule.middle('labels0')))
      .enterData(dimension1, 'text', 'x-label')
        .attr('x', function (d) { return x(d); })
        .attr('y', function (d, i) { return yRule.middle('labels' + (i % 2)) - yRule.middle('labels0'); })
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'middle')
        .text(function (d) { return d.niceToString(); });
  }
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);
  
  var yTicks = y.ticks(10);
  var yTickFormat = y.tickFormat(height / 50);
  chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-line')
    .attr('x2', xRule.size('content'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function (t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(yTickFormat);
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-label')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c2.title);
  
   var color =  d3.scale.category20().domain($.map(series, function (s) { return s.dimension2; }));
  
  //paint graph - line
  chart.enterData(series, 'g', 'shape-serie').attr('transform', translate(xRule.start('content') + x.rangeBand() / 2, yRule.end('content')))
    .append('svg:path').attr('class', 'shape')
      .attr('stroke', function(s) { return getColor(s.dimension2, color); })
      .attr('fill', 'none')
      .attr('stroke-width', 3)
      .attr('shape-rendering', 'initial')
      .attr('d', function(s) { return º.getPathPoints($.map(s.values, function(r, i) { return { x: r == undefined? null: x(r.c0), y: r == undefined? 0: -y(r.c2) }; }) )})
      
  //paint graph - hover area trigger
  chart.enterData(series, 'g', 'hover-trigger-serie').attr('transform', translate(xRule.start('content') + x.rangeBand() / 2, yRule.end('content')))
    .enterData(function(s) { return s.values; }, 'circle', 'point')
      .filter(function(r) {return r != undefined;})
      .attr('cx', function(r, i) { return x(r.c0); })
      .attr('cy', function(r) { return -y(r.c2); })
      .attr('r', function(r) { return 15; })
      .attr('fill', '#fff')
      .attr('fill-opacity', 0)
      .attr('stroke', 'none')
      .attr('data-click', function(r) { return getClickKeys(r, data.columns); })
      .append('svg:title')
      .text(function(r) { return r.c0.niceToString() + ', ' + r.c1.niceToString() + ': ' + r.c2.niceToString(); });
  
  //paint graph - points
  chart.enterData(series, 'g', 'point-serie').attr('transform', translate(xRule.start('content') + x.rangeBand() / 2, yRule.end('content')))
    .enterData(function(s) { return s.values; }, 'circle', 'point')
      .filter(function(r) {return r != undefined;})
      .attr('fill', function(r) { return getColor(r.c1, color); })
      .attr('r', 5)
      .attr('cx', function(r) { return x(r.c0); })
      .attr('cy', function(r) { return -y(r.c2); })
      .attr('data-click', function(r) { return getClickKeys(r, data.columns); })
      .append('svg:title')
      .text(function(r) { return r.c0.niceToString() + ', ' + r.c1.niceToString() + ': ' + r.c2.niceToString(); });
  
    var legendScale = d3.scale.ordinal()
    .domain($.map(series, function (s, i) { return i; }))
    .rangeBands([0, xRule.size('content')]);
  
  if (legendScale.rangeBand() > 50) {
    
    var legendMargin = yRule.size('legend') + 4;
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
      .enterData(series, 'rect', 'color-rect')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('width', yRule.size('legend'))
      .attr('height', yRule.size('legend'))
      .attr('fill', function (s) { return getColor(s.dimension2, color); });
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend')))
      .enterData(series, 'text', 'color-text')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('dominant-baseline', 'middle')
      .text(function (s) { return s.dimension2.niceToString(); });
  }
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .append('svg:line')
    .attr('class', 'x-axis')
    .attr('x2', xRule.size('content'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black'); 
  
}
]]></Script>
</ChartScript>