<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Sub-columns" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Height" ColumnType="Magnitude" />
  </Columns>
  <Icon FileName="multicolumns.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAmpJREFUeNrsmDFLHEEUgGdFAkIqwV+QTmxSB5IioFinicUFEoR0CWKXf5DCxk4sLK5I/oEYiGiRUtKI+A+UBCKEE3Fn3nvOm93B2515d3OLnFvswHIwezv7zfvevJ3djIhUm9uMannrAB8EsLfZpy6CHWAHGG+zk/x5u/+L9o/Pgv7VV4vqU+9F9uiADPf+7eugf+/7TwZsp2JAao/iWMMI4L+DNcr//g76nyw8V/Mr37KpATKcAQz6Ge7p0segf3C6M13FYOFigK3IQc49w4eBdgIioo0gKN3GCEKZe9pYxRqmv4qvDtfJXJ0rQqMUQfGL2p75PARIDjCHNEAe48v5V3Wxvhss++WXi2rjXbzQRwEZbu7Zm/DEYbFyWS3nnjs0JsHxRC8u/6gPa0Wh1/ba65tc/R/cqh9HJwz4MIrB5p6xkdMWMk9YxRULlQpQGOBj4hwkwviNOLo8sM8/Aw40CQ5vg/rpJjqmCsQjSBC9UQFYqNXaQ2ISHEFetcAVwEBTQBQVmVKLBwVJcQ2O3CIL9TZS7AFjitzCKGfPmiTAAK4ErOttFEEeXFKU+/wr4UB68a/B+evrescVemEVk6iIC7OLHkOiPHgAV+ZwXa9ploNGVKShgOPo4Yi9YB3uvgpU9ZomEYzBeUVe76joFYpDOF8FhvU2ArSFUFRkylnjmJ10DM5PcFgvK2+oOK5I2wGTtvkRuPsyNVQFsJFiFBUBgttqJT1/I62ud5yJGSnBJUUIKS9J8gQm0SsCukkJitL00gjAdL0ioDayosTN32jARL3cMv4E3LbPb/2tXlYB7D4edYCP2O4EGADo6x722MhiTAAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
  
  var dimension1 = _.uniq(_.map(data.rows, function(r){return r.c0; }), false, function(c) { return getKey(c);});
  
  var series = _.toArray(º.groupBy(data.rows, function(r){return getKey(r.c1);}, function(list){
    
    var obj = º.toObject(list, function(r){return getKey(r.c0); });
    
    return {
      dimension2 : _.first(list).c1,
      values : _.map(dimension1, function(d1){ return obj[getKey(d1)]; })
    };
    
  }));
  
  var xRule = º.rule({
    _1 : 5,
    title : 15,
    _2 : 10, 
    labels : 20,
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 10,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = º.rule({
    _1 : 5,
    legend : 15,
    _2 : 5,
    content: '*',
    ticks: 4,
    _3 : 5,
    labels0: 15,
    labels1: 15,
    _4 : 10,
    title: 15,
    _5 : 5,
  }, height);
  //yRule.debugY(chart);
  
  var x = d3.scale.ordinal()
      .domain($.map(dimension1, function (d) { return getKey(d); }))
      .rangeBands([0, xRule.size('content')]);
  
  var y = d3.scale.linear()
      .domain([0, _.max( _.map(data.rows, function(r){return r.c2}))])
      .range([0, yRule.size('content')]);
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content')+ (x.rangeBand() / 2), yRule.start('ticks')))
    .enterData(dimension1, 'line', 'x-tick')
      .attr('y2',  function (d, i) { return yRule.start('labels' + (i % 2)) - yRule.start('ticks'); })
      .attr('x1', function (d) { return x(getKey(d)); })
      .attr('x2', function (d) { return x(getKey(d)); })
      .style('stroke', 'Black');
  
  if ((x.rangeBand() * 2) > 60) 
  {
    chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content')+ (x.rangeBand() / 2), yRule.middle('labels0')))
      .enterData(dimension1, 'text', 'x-label')
        .attr('x', function (d) { return x(getKey(d)); })
        .attr('y', function (d, i) { return yRule.middle('labels' + (i % 2)) - yRule.middle('labels0'); })
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'middle')
        .text(function (d) { return getLabel(d); });
  }
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);
  
  var yTicks = y.ticks(10);
  
  chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-line')
    .attr('x2', xRule.size('content'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function (t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(String);
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-label')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c2.title);
  
  var interMagin = 2;
  
  var xSubscale = d3.scale.ordinal()
      .domain($.map(series, function (s) { return getKey(s.dimension2); }))
      .rangeBands([interMagin, x.rangeBand() - interMagin]);
  
  var color =  d3.scale.category20().domain($.map(series, function (s) { return getKey(s.dimension2); }));
  
  //PAINT GRAPH
  chart.enterData(series, 'g', 'shape-serie').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .enterData(function (s) {   return s.values; }, 'rect', 'shape')
    .filter(function(r) { return r != undefined; })
    .attr('stroke', function (r) { return '#fff'; })
    .attr('fill', function (r) { return getColor(r.c1, color); })
    .attr('x', function (r) { return xSubscale(getKey(r.c1)) + x(getKey(r.c0)); })
    .attr('width', xSubscale.rangeBand())
    .attr('y', function (r) { return yRule.size('content') - y(getKey(r.c2)); })      
    .attr('height', function (r) { return y(getKey(r.c2)); })       
    .attr('data-click', function (r) { return getClickKeys(r, data.columns); })
    .append('svg:title')
    .text(function (r) { return  getLabel(r.c0) + ', ' + getLabel(r.c1) + ': ' + getLabel(r.c2); });
  
  
  var legendScale = d3.scale.ordinal()
    .domain($.map(series, function (s, i) { return i; }))
    .rangeBands([0, xRule.size('content')]);
  
  if (legendScale.rangeBand() > 50) {
    
    var legendMargin = yRule.size('legend') + 4;
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
      .enterData(series, 'rect', 'color-rect')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('width', yRule.size('legend'))
      .attr('height', yRule.size('legend'))
      .attr('fill', function (s) { return getColor(s.dimension2, color); });
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend')))
      .enterData(series, 'text', 'color-text')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('dominant-baseline', 'middle')
      .text(function (s) { return getLabel(s.dimension2); });
  }
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .append('svg:line')
    .attr('class', 'x-axis')
    .attr('x2', xRule.size('content'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black'); 
}]]></Script>
</ChartScript>