<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Vertical Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Sub-bars" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Width" ColumnType="Magnitude" />
  </Columns>
  <Icon FileName="stackedbars.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAw9JREFUeNrsmEFrFDEUx5PZfokiCFIF9SYVehCtXtRT9QtUP0Sh30KKFE9ehIIHv4TiqSLiQauVtYJQULx5srtJ3vPl5SWT2V23sxjoQieQyWQm7Pzm/5K8/45GRDXPpVJzXjrAIoDrGzvYKdgBnlBZiCefthexIlztL/Z0uNlTqievsP37mep/+6E03dJ0qCqq1OrYNq5V6ubKefXw3hVdDPDs9c2xm4hAB6oK1Oenh+r2rav1PTkAbfRAQ4AOjsY6i8rS+cvdvgcsp+A4lGIwukBdSwCYjREwqs7FFrh6OGvDedEQ52oxAbUIcg0dA3pGFDAgMAe+BihWzgM6F2ChMKBCm9QK/QAWQC2DeSAQlTywZUgXwFi1EF4PCMUVdGYECgK0n2gScmNcUMyJctYlIA9ooQ61AyysIJgxMFYTbFwSamBC+GIYTZp3mMLK6km/rIIwDOqRWjwfIYMUBQdDI4Ch5iFlOPDjZY5C8RAPBIo79aJhuKDg0dCJSi6FmVcxbzEBLgWkdIgP3jyfOvDCuTW192H/2B/UvGkrdXf1clnA5Y2fU3f95S4Xd4Cn3W59ebKIk2xWr/L+KgzT7McWFC9TerfUp/L415ba7x+2tmO+XV1ZUg/WpluyBHjm2uZ/venH19+THUPZB0HMhN/AjZXNndqhDfn71e5XDzib3WpbEJuZIm7MbMU8GMZ8jbyxMyD4FkMOt66V45noB7WuagD8149AbQ6jYmJeY4aJ9ssbCSPnxkR71s4zZrnYZpC28fAIhJPeWDwkinl1gClXBxvmApyHlNC6LH/PlovHHjyuVOrzEGj0OT+zy6k9okkKOjG1LhhdMRsz2636wTkc5P9EGi+Rz8WokI1zrhFSOhfDy66npePJFDyqAeShjXnYmIs4EZJXp5WweqctcDb6RvGKscw2B+2fJsAo5KQFk6yYzgBdI7TRM3rlYORTXxtLVtutty+mpxwd7VQ4D5uu3KP9+uLSffX+3V5rO+bbOzculbNbx5WtU5+L5+kT3M6j9RRN3X2j7gBPuPwVYADS+ixYpGUkHwAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
 
  var dimension1 = _.uniq(_.map(data.rows, function(r){return r.c0; }), false, function(c) { return getKey(c);});
  
  var series = _.toArray(º.groupBy(data.rows, function(r){return getKey(r.c1);}, function(list){
    
    var obj = º.toObject(list, function(r){return getKey(r.c0); });
    
    return {
      dimension2 : _.first(list).c1,
      values : _.map(dimension1, function(d1){ var row =  obj[getKey(d1)]; return { row: row, d1: d1, from: 0, to: row == undefined? 0 : row.c2}; }),
    };
    
  }));
  
    
  for(var j = 1; j < series.length; j++)
  {
    var sp = series[j - 1];
    var s = series[j];
    for(var i = 0; i < dimension1.length; i++)
    {
      s.values[i].from = sp.values[i].to;
      s.values[i].to += sp.values[i].to;
    }
  }
  
  
  var xRule = º.rule({
    _1 : 5,
    title : 15,
    _2 : 10, 
    ticks: 4,
    content: '*',
    _4: 5,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = º.rule({
    _1 : 5,
    legend : 15,
    _2 : 5,
    content: '*',
    ticks: 4,
    _3 : 5,
    labels: 10,
    _4 : 10,
    title: 15,
    _5 : 5,
  }, height);
  //yRule.debugY(chart);

  var x = d3.scale.linear()
      .domain([0, d3.max(series, function(s){ return d3.max(s.values, function(v){return v.to;}); })])
      .range([0, xRule.size('content')]);
  
  var y = d3.scale.ordinal()
      .domain($.map(dimension1, function (v) { return getKey(v); }))
      .rangeBands([0, yRule.size('content')]);

  var xTicks = x.ticks(width/50);
  
  chart.append('svg:g').attr('class', 'x-lines').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .enterData(xTicks, 'line', 'y-lines')
    .attr('x1', function(t) { return x(t); })
    .attr('x2', function(t) { return x(t); })
    .attr('y1', yRule.size('content'))
  	.style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content'), yRule.start('ticks')))
    .enterData(xTicks, 'line', 'x-tick')
    .attr('x1', x)
    .attr('x2', x)
    .attr('y2', yRule.size('ticks'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content'), yRule.end('labels')))
    .enterData(xTicks, 'text', 'x-label')
    .attr('x', x)
    .attr('text-anchor', 'middle')
    .text(String);
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
  	.text(data.columns.c1.title);
  
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
	.enterData(dimension1, 'line', 'y-tick')
	.attr('x2', xRule.size('ticks'))
	.attr('y1', function (v) { return -y(getKey(v)); })
	.attr('y2', function (v) { return -y(getKey(v)); })
  	.style('stroke', 'Black');

  chart.append('svg:g').attr('class', 'y-title').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);

  
  var color = d3.scale.category20().domain([0, $.map(series, function (s) { return getKey(s.dimension2); })]);
  
  //PAINT GRAPH
  chart.enterData(series, 'g', 'shape-serie').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .enterData(function (s) { return s.values; }, 'rect', 'shape')
    .filter(function (r) {return r.row !== undefined;})
    .attr('stroke', '#fff')
    .attr('fill', function (r) { return getColor(r.row.c1, color); })
    .attr('transform', function (r) { return translate(0,  y(getKey(r.row.c0))); })
    .attr('height', y.rangeBand())
    .attr('width', function (r) { return x(getLabel(r.row.c2)); })
    .attr('x', function (r) { return x(r.from) })
    .attr('data-click', function (r) { return getClickKeys(r.row, data.columns); })
    .append('svg:title')
    .text(function (r) { return getLabel(r.row.c0) + ', ' + getLabel(r.row.c1) + ': ' + getLabel(r.row.c2); });

  
  if (y.rangeBand() > 15 && series.length > 0) {
    
    var xHalf = xRule.size('content') / 2;
    var labelMargin = 10;
    chart.append('svg:g').attr('class', 'y-axis-tick-label').attr('transform', translate(xRule.start('content'), yRule.start('content') + y.rangeBand() / 2))
      .enterData(_.last(series).values,'text', 'y-axis-tick-label sf-chart-strong')
      .attr('x', function (v) { var posx = x(v.to); return posx >= xHalf ? posx - labelMargin : posx + labelMargin; })
      .attr('y', function (v) { return y(getKey(v.d1)); })
      .attr('text-anchor', function (v) { var posx = x(v.to); return posx >= xHalf ? 'end' : 'start'; })
      .attr('fill', function (v) { var posx = x(v.to); return posx >= xHalf ? '#fff' : '#000'; })
      .attr('dominant-baseline', 'middle')
      .text(function (v, i) { return getLabel(v.d1); });
  }
  
  var legendScale = d3.scale.ordinal()
      	.domain($.map(series, function (s, i) { return i; }))
      	.rangeBands([0, xRule.size('content')]);
  
  if (legendScale.rangeBand() > 50) {
      var legendMargin = yRule.size('legend') + 4;
      chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
      .enterData(series, 'rect', 'color-rect')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('width', yRule.size('legend'))
      .attr('height', yRule.size('legend'))
      .attr('fill', function (s) { return getColor(s.dimension2, color); });
  
      chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend')))
      .enterData(series, 'text', 'color-text')
      .attr('x', function (e, i) { return legendScale(i); })
        .attr('dominant-baseline', 'middle')
      .text(function (s) { return getLabel(s.dimension2); });
  }

  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
     .append('svg:line')
     .attr('class', 'x-axis')
     .attr('x2', xRule.size('content'))
     .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black');
}
]]></Script>
</ChartScript>