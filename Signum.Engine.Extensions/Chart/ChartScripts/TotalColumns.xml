<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Columns" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Height" ColumnType="Magnitude" />
  </Columns>
  <Icon FileName="totalcolumns.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAlVJREFUeNrsmD1LHUEUhs9KqpDOQhHTBPGjthEJNiaNZSoLbSUW0UIsg78gPyJYpLZIbAL5KJJoRLEQCYqxkpB/cHdn5rhn70W8Zueddc5AbnEHlr2zl5l55jlnZj8yZqZeLgPU46UPmARweWO7ZxPxAfrz3ftj/vLzgqx1ZJ0jV535pi7nZ7Pj9HJxJrvb9u3OEX/6cVbb1km9/P386SS9WprNogG/HlzQwvx01zUZwJRHYRzlxtLOh+8C+E/bz3vn9GJhprZNXhjKc0u7H/cFMD4Hy4lCOBnIebYp7jT2wbUKS012OAh4e4/0DeTbRwUcwbVyQ032YGyw00GMBckxBCd19TbDLt6CXEdwrbKuBhSDIQsoxAiulcagC1rwhVjsI7i8SGQwZAEaBHCFSQGosCBtEZxERh9ihQVpi+BMCkAJU6wFiTyCs87p78WS6LEWpsYf0+HRaRVqOepydXJsRAdYJXqkhfWhTXo4t1Rj1snMpXf6u79Vnq90iyQ2ROwMhCO23vv4vRZJfP4whGNryn6UOTgxNkonv3535dHdXJp4MhxGrYGrDGoB1wZX6dHKKhzo8tvrsv6nhspAuKqufie5Zctrgf23SQTHNve2vQdg2II/zzFcO8TaRdLAArbvh5NVrjfYpsQWGNgHcNIvpwkxtgDtIzhX6BeJvCaGLOAJArjynCTE0RY69n1wwck1Mxi2gOxDOE7wwNp+3FNYAHCcwmB7jDgL1pEaroFBjrZQ2VfChTdq0lnQwknJ5Omk1z6/bb9ZzroA+19Y+4D/sVwLMAAe1Sa/GfDcBAAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){
    
  if(data.columns.c2.scale != "ZeroMax")
    throw new Error("Scale " + data.columns.c2.scale + " not supported");
  
  var dimension1 = _.uniq(_.map(data.rows, function(r){return r.c0; }), false, function(c) { return c.toString();});
  
  var series = _.toArray(º.groupBy(data.rows, function(r){return r.c1;}, function(list){
    
    var obj = º.toObject(list, function(r){return r.c0; });
    
    return {
      dimension2 : _.first(list).c1,
      values : _.map(dimension1, function(d1){ var row =  obj[d1]; return { row: row, d1: d1, from: 0, to: row == undefined? 0 : row.c2}; }),
    };
    
  }));
  
    
  for(var j = 1; j < series.length; j++)
  {
    var sp = series[j - 1];
    var s = series[j];
    for(var i = 0; i < dimension1.length; i++)
    {
      s.values[i].from = sp.values[i].to;
      s.values[i].to += sp.values[i].to;
    }
  }  
  
  var last = _.last(series);
  
  for(var j = 0; j < series.length; j++)
  {
    var s = series[j];
    for(var i = 0; i < dimension1.length; i++)
    {
      s.values[i].from /= last.values[i].to;
      s.values[i].to /= last.values[i].to;
    }
  }
  
  var xRule = º.rule({
    _1 : 5,
    title : 15,
    _2 : 10, 
    labels : 20,
    _3 : 5,
    ticks: 4,
    content: '*',
    _4: 10,
  }, width);
  //xRule.debugX(chart)
  
  var yRule = º.rule({
    _1 : 5,
    legend : 15,
    _2 : 5,
    content: '*',
    ticks: 4,
    _3 : 5,
    _4 : 10,
    title: 15,
    _5 : 5,
  }, height);
  //yRule.debugY(chart);
  

  var x = d3.scale.ordinal()
      .domain($.map(dimension1, function (d) { return d; }))
      .rangeBands([0, xRule.size('content')]);
  
  var y = d3.scale.linear()
      .domain([0, d3.max(series, function(s){ return d3.max(s.values, function(v){return v.to;}); })])
      .range([0, yRule.size('content')]);
  

  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);
  
  
  var yTicks = y.ticks(10);
  chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-line')
    .attr('x2', xRule.size('content'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function (t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(function(a){return (a * 100) + '%';});
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-label')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c2.title);
  
  var color = d3.scale.category20().domain($.map(series, function (s) { return s.dimension2; }));
  
  //PAINT CHART
  chart.enterData(series, 'g', 'shape-serie').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(function (s) { return s.values; }, 'rect', 'shape')
      .filter(function(r){return r.row !== undefined; })
      .attr('stroke', '#fff')
      .attr('fill', function (r) { return getColor(r.row.c1, color); })
      .attr('x', function (r) { return x(r.row.c0); })
      .attr('width', x.rangeBand())
      .attr('height', function (r) { return y(r.to - r.from); })
      .attr('y', function (r) { return -y(r.to) })
      .attr('data-click', function (r) { return getClickKeys(r.row, data.columns); })
      .append('svg:title')
      .text(function (r, i) { return r.row.c0.niceToString() + ', ' + r.row.c1.niceToString() + ': ' + r.row.c2.niceToString(); });
   

  if (x.rangeBand() > 50) {
    chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content'), yRule.middle('content')))
      .enterData(_.last(series).values, 'text', 'x-label')
      .attr('transform', function (r){ return translate( x(r.row.c0) + x.rangeBand()/2,0 ) +  rotate(-90);})
      .attr('dominant-baseline', 'middle')
      .attr('font-weight', 'bold')
      .attr('fill', '#fff')
      .attr('dx',  -10 )
      .attr('text-anchor', 'middle')
      .text(function (r) { return r.d1.niceToString(); });
  }
  
  var legendScale = d3.scale.ordinal()
    .domain($.map(series, function (s, i) { return i; }))
    .rangeBands([0, xRule.size('content')]);
  
  if (legendScale.rangeBand() > 50) {
    
    var legendMargin = yRule.size('legend') + 4;
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
      .enterData(series, 'rect', 'color-rect')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('width', yRule.size('legend'))
      .attr('height', yRule.size('legend'))
      .attr('fill', function (s) { return getColor(s.dimension2, color); });
    
    chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend')))
      .enterData(series, 'text', 'color-text')
      .attr('x', function (e, i) { return legendScale(i); })
      .attr('dominant-baseline', 'middle')
      .text(function (s) { return s.dimension2.niceToString(); });
  }
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .append('svg:line')
    .attr('class', 'x-axis')
    .attr('x2', xRule.size('content'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black'); 
  
}

]]></Script>
</ChartScript>