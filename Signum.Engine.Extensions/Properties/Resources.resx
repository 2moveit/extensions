<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LastExecution" xml:space="preserve">
    <value>Last Execution</value>
  </data>
  <data name="Executions" xml:space="preserve">
    <value>Executions</value>
  </data>
  <data name="SufixNotSet" xml:space="preserve">
    <value>The physical filename has not been set</value>
  </data>
  <data name="RepositoryNotSet" xml:space="preserve">
    <value>The file repository has not been set</value>
  </data>
  <data name="IncorrectPassword" xml:space="preserve">
    <value>Incorrect password</value>
  </data>
  <data name="Username0IsNotValid" xml:space="preserve">
    <value>Username {0} is not valid</value>
  </data>
  <data name="ImpossibleToExecute0FromState1" xml:space="preserve">
    <value>Impossible to execute {0} from state {1}</value>
  </data>
  <data name="Operation0IsNotAuthorized" xml:space="preserve">
    <value>Operation {0} is not Authorized</value>
  </data>
  <data name="TheEntity0IsNew" xml:space="preserve">
    <value>The entity {0} is new</value>
  </data>
  <data name="Operation0DoesNotHaveDeleteInitialized" xml:space="preserve">
    <value>Operation {0} does not have Delete initialized</value>
  </data>
  <data name="ErrorParsingXMLHelpFiles" xml:space="preserve">
    <value>Error parsing XML Help files:
</value>
  </data>
  <data name="QueryOf0Connecting1" xml:space="preserve">
    <value>Query of {0} connecting {1}</value>
  </data>
  <data name="QueryOf0" xml:space="preserve">
    <value>Query of {0}</value>
  </data>
  <data name="TheDatabaseVersion" xml:space="preserve">
    <value>the database version</value>
  </data>
  <data name="YourVersion" xml:space="preserve">
    <value>your version</value>
  </data>
  <data name="RemovesThe0FromTheDatabase" xml:space="preserve">
    <value>Removes the {0} from the database</value>
  </data>
  <data name="ConstructsANew0" xml:space="preserve">
    <value>Constructs a new {0}</value>
  </data>
  <data name="From0OfThe1" xml:space="preserve">
    <value>from {0} of the {1} </value>
  </data>
  <data name="NotAuthorizedToSave0" xml:space="preserve">
    <value>Not authorized to Save '{0}'</value>
  </data>
  <data name="NotAuthorizedToRetrieve0" xml:space="preserve">
    <value>Not authorized to Retrieve '{0}'</value>
  </data>
  <data name="AccessToFacadeMethod0IsNotAllowed" xml:space="preserve">
    <value>Access to Facade Method '{0}' is not allowed</value>
  </data>
  <data name="NotAuthorizedToRetrieveThe0WithId1" xml:space="preserve">
    <value>Not authorized to retrieve the {0} with Id {1}</value>
  </data>
  <data name="_0CyclesHaveBeenFoundInTheGraphOfRolesDueToTheRelationships" xml:space="preserve">
    <value>{0} cycles have been found in the graph of Roles due to the relationships:
</value>
  </data>
  <data name="TheKey0IsNotFoundIn1Table" xml:space="preserve">
    <value>The key {0} is not found in {1} table</value>
  </data>
  <data name="NotValueFor0IsNotFoundIn1Table" xml:space="preserve">
    <value>Not value for {0} is not found in {1} table</value>
  </data>
  <data name="Operation0NotFoundForType1" xml:space="preserve">
    <value>Operation {0} not found for Type {1}</value>
  </data>
  <data name="Operation0IsA1NotA2Use3Instead" xml:space="preserve">
    <value>Operation {0} is a {1} not a {2}, use '{3}' instead</value>
  </data>
  <data name="Operation0IsNotAllowedForLites" xml:space="preserve">
    <value>Operation {0} is not allowed for lites</value>
  </data>
  <data name="Operation0NeedsALite" xml:space="preserve">
    <value>Operation {0} needs a Lite</value>
  </data>
  <data name="Type0HasToImplement1AtLeast" xml:space="preserve">
    <value>type {0} has to implement {1} at least</value>
  </data>
  <data name="AmbiguityBetweenInterfaces0" xml:space="preserve">
    <value>Ambiguity between interfaces: {0}</value>
  </data>
  <data name="TheOperationNeedsA0InTheArgumentNumber1" xml:space="preserve">
    <value>The operation needs a {0} in the argument number {1}</value>
  </data>
  <data name="Operation0DoesNotHaveConstructorInitialized" xml:space="preserve">
    <value>Operation {0} does not have Constructor initialized</value>
  </data>
  <data name="Operation0DoesNotHaveConstructInitialized" xml:space="preserve">
    <value>Operation {0} does not have Construct initialized</value>
  </data>
  <data name="A0HaveAlreadyBeenRegistered" xml:space="preserve">
    <value>A {0} have already been registered</value>
  </data>
  <data name="TheFollowingKeysHaveBeenRepeatedIn01" xml:space="preserve">
    <value>The Following Keys have been repeated in {0}:
{1}</value>
  </data>
  <data name="AfterTheOperationTheStateShouldBe0ButIs1" xml:space="preserve">
    <value>After the operation {0} the state should be {1} but is {2}</value>
  </data>
  <data name="Operation0DoesNotHaveExecuteInitialized" xml:space="preserve">
    <value>Operation {0} does not have Execute initialized</value>
  </data>
  <data name="ExcelReportArgumentIsNecessaryForCompositeReports" xml:space="preserve">
    <value>excelReport argument is necessary for compositeReports</value>
  </data>
  <data name="Character" xml:space="preserve">
    <value>character</value>
  </data>
  <data name="DateTime" xml:space="preserve">
    <value>date and time</value>
  </data>
  <data name="Integer" xml:space="preserve">
    <value>integer</value>
  </data>
  <data name="Value" xml:space="preserve">
    <value>value</value>
  </data>
  <data name="String" xml:space="preserve">
    <value>string</value>
  </data>
  <data name="Check" xml:space="preserve">
    <value>check</value>
  </data>
  <data name="Should" xml:space="preserve">
    <value>. Should  </value>
  </data>
  <data name="The0" xml:space="preserve">
    <value>The {0}</value>
  </data>
  <data name="_0IsA1" xml:space="preserve">
    <value>{0} is a {1}</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>amount</value>
  </data>
  <data name="ExpressedIn" xml:space="preserve">
    <value>expressed in </value>
  </data>
  <data name="FromMany0" xml:space="preserve">
    <value>from many {0}</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>date</value>
  </data>
  <data name="OfThe0" xml:space="preserve">
    <value>of the {0}</value>
  </data>
  <data name="Call0Over1OfThe2" xml:space="preserve">
    <value>Call {0} over {1} of the {2}</value>
  </data>
  <data name="ValueLike0" xml:space="preserve">
    <value>value like {0}</value>
  </data>
  <data name="OrNull" xml:space="preserve">
    <value>or null</value>
  </data>
  <data name="_0IsACollectionOfElements1" xml:space="preserve">
    <value>{0} is a collection of elements {1}</value>
  </data>
  <data name="EmailIsNotValid" xml:space="preserve">
    <value>The email is different from the stored email</value>
  </data>
</root>